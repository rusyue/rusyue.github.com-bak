<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frozen&#39;s Notes</title>
  
  <subtitle>技术/思考/生活/分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rusyue.com/"/>
  <updated>2018-02-20T08:27:04.271Z</updated>
  <id>https://rusyue.com/</id>
  
  <author>
    <name>Frozen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用AHK提高Windows下的工作效率</title>
    <link href="https://rusyue.com/2018/02/20/%E4%BD%BF%E7%94%A8AHK%E6%8F%90%E9%AB%98Windows%E4%B8%8B%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    <id>https://rusyue.com/2018/02/20/使用AHK提高Windows下的工作效率/</id>
    <published>2018-02-19T16:37:06.000Z</published>
    <updated>2018-02-20T08:27:04.271Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">功能描述</th><th style="text-align:center">快捷键</th><th style="text-align:center">功能描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>m</code></td><td style="text-align:center"><code>Ctrl + S - 保存</code></td><td style="text-align:center"><code>,</code></td><td style="text-align:center"><code>鼠标左键</code></td></tr><tr><td style="text-align:center"><code>n</code></td><td style="text-align:center"><code>Ctrl + Z - 撤销</code></td><td style="text-align:center"><code>q</code></td><td style="text-align:center"><code>鼠标左键</code></td></tr><tr><td style="text-align:center"><code>z</code></td><td style="text-align:center"><code>Ctrl + Z - 撤销</code></td><td style="text-align:center"><code>.</code></td><td style="text-align:center"><code>鼠标右键</code></td></tr><tr><td style="text-align:center"><code>y</code></td><td style="text-align:center"><code>Ctrl + Y - 重做</code></td><td style="text-align:center"><code>e</code></td><td style="text-align:center"><code>鼠标右键</code></td></tr><tr><td style="text-align:center"><code>c</code></td><td style="text-align:center"><code>Ctrl + C - 复制</code></td><td style="text-align:center"><code>r</code></td><td style="text-align:center"><code>滚轮向上</code></td></tr><tr><td style="text-align:center"><code>v</code></td><td style="text-align:center"><code>Ctrl + V - 粘贴</code></td><td style="text-align:center"><code>f</code></td><td style="text-align:center"><code>滚轮向下</code></td></tr><tr><td style="text-align:center"><code>x</code></td><td style="text-align:center"><code>Ctrl + X - 剪切</code></td><td style="text-align:center"><code>h</code></td><td style="text-align:center"><code>退格键</code></td></tr><tr><td style="text-align:center"><code>t</code></td><td style="text-align:center"><code>PageUp - 向上翻页</code></td><td style="text-align:center"><code>u</code></td><td style="text-align:center"><code>Home - 光标至行首</code></td></tr><tr><td style="text-align:center"><code>g</code></td><td style="text-align:center"><code>PageDown - 向下翻页</code></td><td style="text-align:center"><code>o</code></td><td style="text-align:center"><code>End - 光标至行尾</code></td></tr><tr><td style="text-align:center"><code>w</code></td><td style="text-align:center"><code>向上移动鼠标</code></td><td style="text-align:center"><code>i</code></td><td style="text-align:center"><code>Up - 光标上移</code></td></tr><tr><td style="text-align:center"><code>d</code></td><td style="text-align:center"><code>向右移动鼠标</code></td><td style="text-align:center"><code>l</code></td><td style="text-align:center"><code>Right - 光标右移</code></td></tr><tr><td style="text-align:center"><code>s</code></td><td style="text-align:center"><code>向下移动鼠标</code></td><td style="text-align:center"><code>k</code></td><td style="text-align:center"><code>Down - 光标下移</code></td></tr><tr><td style="text-align:center"><code>a</code></td><td style="text-align:center"><code>向左移动鼠标</code></td><td style="text-align:center"><code>j</code></td><td style="text-align:center"><code>Left - 光标左移</code></td></tr><tr><td style="text-align:center"><code>shift + w</code></td><td style="text-align:center"><code>向上快速移动鼠标</code></td><td style="text-align:center"><code>F9</code></td><td style="text-align:center"><code>重载脚本</code></td></tr><tr><td style="text-align:center"><code>shift + d</code></td><td style="text-align:center"><code>向右快速移动鼠标</code></td><td style="text-align:center"><code>F10</code></td><td style="text-align:center"><code>编辑脚本</code></td></tr><tr><td style="text-align:center"><code>shift + s</code></td><td style="text-align:center"><code>向下快速移动鼠标</code></td><td style="text-align:center"><code>F11</code></td><td style="text-align:center"><code>挂起脚本</code></td></tr><tr><td style="text-align:center"><code>shift + a</code></td><td style="text-align:center"><code>向左快速移动鼠标</code></td><td style="text-align:center"><code>F12</code></td><td style="text-align:center"><code>暂停脚本</code></td></tr></tbody></table><a id="more"></a><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; =======================================</span></span><br><span class="line"><span class="comment">; 单击 CapsLock 键切换键盘鼠标</span></span><br><span class="line"><span class="comment">; 长按 CapsLock 键切换大写锁定</span></span><br><span class="line"><span class="comment">; =======================================</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">$CapsLock::</span></span><br><span class="line"><span class="built_in">KeyWait,</span> CapsLock</span><br><span class="line">If (<span class="built_in">A_PriorKey</span> &lt;&gt; <span class="string">"CapsLock"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">If (<span class="built_in">A_TimeSinceThisHotkey</span> &gt; <span class="number">300</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">    SetCapsLockState,</span> % GetKeyState(<span class="string">"CapsLock"</span>, <span class="string">"T"</span>) ? <span class="string">"Off"</span> : <span class="string">"On"</span></span><br><span class="line">    <span class="comment">; Tip("大写锁定: " . (GetKeyState("CapsLock", "T") ? "开启" : "关闭"))</span></span><br><span class="line">    ShowTIPS(<span class="string">"大写锁定: "</span> . (GetKeyState(<span class="string">"CapsLock"</span>, <span class="string">"T"</span>) ? <span class="string">"开启"</span> : <span class="string">"关闭"</span>))</span><br><span class="line">&#125;</span><br><span class="line">Else</span><br><span class="line">&#123;</span><br><span class="line">    CapsLockMode := !CapsLockMode</span><br><span class="line">    <span class="comment">; Tip(CapsLockMode ? "CapsLockMode" : "", "INF", 20, 0, 600)</span></span><br><span class="line">    <span class="comment">; TIP("键盘鼠标: " . (CapsLockMode ? "开启" : "关闭"))</span></span><br><span class="line">    ShowTIPS(<span class="string">"键盘鼠标: "</span> . (CapsLockMode ? <span class="string">"开启"</span> : <span class="string">"关闭"</span>))</span><br><span class="line"><span class="built_in">    SetTimer,</span> Beep, -<span class="number">300</span></span><br><span class="line">    If CapsLockMode</span><br><span class="line"><span class="built_in">        SetTimer,</span> CapsLockModeTimeOut, <span class="number">2500</span></span><br><span class="line">    Else</span><br><span class="line"><span class="built_in">        SetTimer,</span> CapsLockModeTimeOut, Off</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">Return</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">CapsLockModeTimeOut:</span></span><br><span class="line"><span class="comment">; ShowTIPS("键盘鼠标: " . A_TimeSinceThisHotkey)</span></span><br><span class="line">If (<span class="built_in">A_TimeSinceThisHotkey</span> &lt; <span class="number">5000</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="built_in">SetTimer,</span> CapsLockModeTimeOut, Off</span><br><span class="line">CapsLockMode := !CapsLockMode</span><br><span class="line">ShowTIPS(<span class="string">"键盘鼠标: "</span> . (CapsLockMode ? <span class="string">"开启"</span> : <span class="string">"超时"</span>))</span><br><span class="line"><span class="built_in">SetTimer,</span> Beep, -<span class="number">300</span></span><br><span class="line"><span class="keyword">Return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; =================================================================</span></span><br><span class="line"><span class="comment">; 按住 CapsLock 键、或者 键盘鼠标 开启时，有如下快捷键：</span></span><br><span class="line"><span class="comment">; =================================================================</span></span><br><span class="line"><span class="comment">; |  快捷键   |       功能描述      | 快捷键 |      功能描述     |</span></span><br><span class="line"><span class="comment">; | :-------: | :-----------------: | :----: | :---------------: |</span></span><br><span class="line"><span class="comment">; |     m     |   Ctrl + S - 保存   |   ,    |      鼠标左键     |</span></span><br><span class="line"><span class="comment">; |     n     |   Ctrl + Z - 撤销   |   q    |      鼠标左键     |</span></span><br><span class="line"><span class="comment">; |     z     |   Ctrl + Z - 撤销   |   .    |      鼠标右键     |</span></span><br><span class="line"><span class="comment">; |     y     |   Ctrl + Y - 重做   |   e    |      鼠标右键     |</span></span><br><span class="line"><span class="comment">; |     c     |   Ctrl + C - 复制   |   r    |      滚轮向上     |</span></span><br><span class="line"><span class="comment">; |     v     |   Ctrl + V - 粘贴   |   f    |      滚轮向下     |</span></span><br><span class="line"><span class="comment">; |     x     |   Ctrl + X - 剪切   |   h    |      退格键       |</span></span><br><span class="line"><span class="comment">; |     t     |  PageUp - 向上翻页  |   u    | Home - 光标至行首 |</span></span><br><span class="line"><span class="comment">; |     g     | PageDown - 向下翻页 |   o    | End - 光标至行尾  |</span></span><br><span class="line"><span class="comment">; |     w     |     向上移动鼠标    |   i    |   Up - 光标上移   |</span></span><br><span class="line"><span class="comment">; |     d     |     向右移动鼠标    |   l    |  Right - 光标右移 |</span></span><br><span class="line"><span class="comment">; |     s     |     向下移动鼠标    |   k    |  Down - 光标下移  |</span></span><br><span class="line"><span class="comment">; |     a     |     向左移动鼠标    |   j    |  Left - 光标左移  |</span></span><br><span class="line"><span class="comment">; | shift + w |   向上快速移动鼠标  |   F9   |      重载脚本     |</span></span><br><span class="line"><span class="comment">; | shift + d |   向右快速移动鼠标  |  F10   |      编辑脚本     |</span></span><br><span class="line"><span class="comment">; | shift + s |   向下快速移动鼠标  |  F11   |      挂起脚本     |</span></span><br><span class="line"><span class="comment">; | shift + a |   向左快速移动鼠标  |  F12   |      暂停脚本     |</span></span><br><span class="line"><span class="comment">; =================================================================</span></span><br><span class="line"><span class="comment">; 需要更多快捷键的话自己添加到下面两个 #If 之间……</span></span><br><span class="line"><span class="comment">; =================================================================</span></span><br><span class="line"></span><br><span class="line">#If CapsLockMode <span class="literal">Or</span> GetKeyState(<span class="string">"CapsLock"</span>, <span class="string">"P"</span>)</span><br><span class="line"><span class="symbol">Up::</span>MouseMove, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, R    <span class="comment">;w::Send, &#123;Up&#125;</span></span><br><span class="line"><span class="symbol">Left::</span>MouseMove, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, R    <span class="comment">;a::Send, &#123;Left&#125;</span></span><br><span class="line"><span class="symbol">Down::</span>MouseMove, <span class="number">0</span>, +<span class="number">1</span>, <span class="number">0</span>, R    <span class="comment">;s::Send, &#123;Down&#125;</span></span><br><span class="line"><span class="symbol">Right::</span>MouseMove, +<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, R    <span class="comment">;d::Send, &#123;Right&#125;</span></span><br><span class="line"><span class="symbol">,::</span>LButton</span><br><span class="line"><span class="symbol">q::</span>LButton</span><br><span class="line"><span class="symbol">.::</span>RButton</span><br><span class="line"><span class="symbol">e::</span>RButton</span><br><span class="line"><span class="symbol">r::</span>MouseClick, WheelUp, , , <span class="number">3</span></span><br><span class="line"><span class="symbol">f::</span>MouseClick, WheelDown, , , <span class="number">3</span></span><br><span class="line"><span class="symbol">t::</span>PgUp</span><br><span class="line"><span class="symbol">g::</span>Pgdn</span><br><span class="line"><span class="symbol">i::</span>Up</span><br><span class="line"><span class="symbol">l::</span>Right</span><br><span class="line"><span class="symbol">k::</span>Down</span><br><span class="line"><span class="symbol">j::</span>Left</span><br><span class="line"><span class="symbol">h::</span>Backspace</span><br><span class="line"><span class="symbol">u::</span>Home</span><br><span class="line"><span class="symbol">o::</span>End</span><br><span class="line"><span class="symbol">w::</span>MoveCursor(<span class="string">"w"</span>, <span class="number">1</span>)</span><br><span class="line"><span class="symbol">a::</span>MoveCursor(<span class="string">"a"</span>)</span><br><span class="line"><span class="symbol">s::</span>MoveCursor(<span class="string">"s"</span>, <span class="number">1</span>)</span><br><span class="line"><span class="symbol">d::</span>MoveCursor(<span class="string">"d"</span>)</span><br><span class="line"><span class="symbol">+w::</span>MoveCursor(<span class="string">"w"</span>, <span class="number">80</span>)</span><br><span class="line"><span class="symbol">+a::</span>MoveCursor(<span class="string">"a"</span>, <span class="number">80</span>)</span><br><span class="line"><span class="symbol">+s::</span>MoveCursor(<span class="string">"s"</span>, <span class="number">80</span>)</span><br><span class="line"><span class="symbol">+d::</span>MoveCursor(<span class="string">"d"</span>, <span class="number">80</span>)</span><br><span class="line"><span class="symbol">m::</span>^s</span><br><span class="line"><span class="symbol">n::</span>^z</span><br><span class="line"><span class="symbol">y::</span>^y</span><br><span class="line"><span class="symbol">z::</span>^z</span><br><span class="line"><span class="symbol">c::</span>^c</span><br><span class="line"><span class="symbol">v::</span>^v</span><br><span class="line"><span class="symbol">x::</span>^x</span><br><span class="line"><span class="symbol">F9::</span>Reload</span><br><span class="line"><span class="symbol">F10::</span>Edit</span><br><span class="line"><span class="symbol">F11::</span><span class="keyword">Suspend</span></span><br><span class="line"><span class="symbol">F12::</span><span class="keyword">Pause</span></span><br><span class="line">#If</span><br><span class="line"></span><br><span class="line"><span class="symbol">Beep:</span></span><br><span class="line"><span class="built_in">SoundBeep,</span> CapsLockMode ? <span class="number">1900</span> : <span class="number">600</span>, <span class="number">100</span></span><br><span class="line"><span class="keyword">Return</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;快捷键&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;功能描述&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;快捷键&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;m&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Ctrl + S - 保存&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;,&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;鼠标左键&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Ctrl + Z - 撤销&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;鼠标左键&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;z&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Ctrl + Z - 撤销&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;鼠标右键&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;y&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Ctrl + Y - 重做&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;e&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;鼠标右键&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Ctrl + C - 复制&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;滚轮向上&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Ctrl + V - 粘贴&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;f&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;滚轮向下&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Ctrl + X - 剪切&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;h&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;退格键&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;t&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;PageUp - 向上翻页&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Home - 光标至行首&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;PageDown - 向下翻页&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;o&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;End - 光标至行尾&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;向上移动鼠标&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;i&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Up - 光标上移&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;d&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;向右移动鼠标&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;l&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Right - 光标右移&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;s&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;向下移动鼠标&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;k&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Down - 光标下移&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;向左移动鼠标&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Left - 光标左移&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;shift + w&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;向上快速移动鼠标&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;F9&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;重载脚本&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;shift + d&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;向右快速移动鼠标&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;F10&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;编辑脚本&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;shift + s&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;向下快速移动鼠标&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;F11&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;挂起脚本&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;shift + a&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;向左快速移动鼠标&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;F12&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;暂停脚本&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="工具" scheme="https://rusyue.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="AHK" scheme="https://rusyue.com/tags/AHK/"/>
    
      <category term="AutoHotkey" scheme="https://rusyue.com/tags/AutoHotkey/"/>
    
      <category term="Tools" scheme="https://rusyue.com/tags/Tools/"/>
    
      <category term="工具" scheme="https://rusyue.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="脚本" scheme="https://rusyue.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="效率" scheme="https://rusyue.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>Meting &amp; APlayer</title>
    <link href="https://rusyue.com/2018/02/17/Meting/"/>
    <id>https://rusyue.com/2018/02/17/Meting/</id>
    <published>2018-02-17T15:38:20.000Z</published>
    <updated>2018-02-19T16:22:54.213Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><br><img class="img-no-bd" src="https://user-images.githubusercontent.com/2666735/30651452-58ae6c88-9deb-11e7-9e13-6beae3f6c54c.png" alt="Meting"><br></p><p align="center"><br><a style="display: inline-block;" href="https://i-meto.com" target="_blank" rel="noopener"><img class="img-no-bd" alt="Author" src="https://img.shields.io/badge/Author-METO-blue.svg?style=flat-square"></a><br><a style="display: inline-block;" href="https://www.npmjs.com/package/meting" target="_blank" rel="noopener"><img class="img-no-bd" alt="Version" src="https://img.shields.io/npm/v/meting.svg?style=flat-square"></a><br><a style="display: inline-block;" href="https://travis-ci.org/metowolf/MetingJS" target="_blank" rel="noopener"><img class="img-no-bd" alt="Travis" src="https://img.shields.io/travis/metowolf/MetingJS.svg?style=flat-square"></a><br><a style="display: inline-block;" href=""><img class="img-no-bd" alt="License" src="https://img.shields.io/npm/l/meting.svg?style=flat-square"></a><br></p><!-- data-id="60198" --><div class="aplayer" data-id="1984937420" data-server="netease" data-autoplay="false" data-type="playlist"><br></div><a id="more"></a><h1 id="Meting"><a href="#Meting" class="headerlink" title="Meting"></a>Meting</h1><hr><h2 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h2><p><a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">https://github.com/MoePlayer/APlayer</a></p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p><a href="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js</a><br><a href="https://unpkg.com/meting/dist/Meting.min.js" target="_blank" rel="noopener">https://unpkg.com/meting/dist/Meting.min.js</a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/aplayer/1.6.0/APlayer.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aplayer"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-id</span>=<span class="string">"60198"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-server</span>=<span class="string">"netease"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-type</span>=<span class="string">"playlist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/Meting.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://music.163.com/#/playlist?id=60198" target="_blank" rel="noopener">https://music.163.com/#/playlist?id=60198</a></p><h2 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h2><table><thead><tr><th style="text-align:left">option</th><th style="text-align:center">default</th><th style="text-align:left">description</th></tr></thead><tbody><tr><td style="text-align:left">data-id</td><td style="text-align:center"><strong>require</strong></td><td style="text-align:left">song id / playlist id / album id / search keyword</td></tr><tr><td style="text-align:left">data-server</td><td style="text-align:center"><strong>require</strong></td><td style="text-align:left">music platform: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td style="text-align:left">data-type</td><td style="text-align:center"><strong>require</strong></td><td style="text-align:left"><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td style="text-align:left">data-mode</td><td style="text-align:center"><code>circulation</code></td><td style="text-align:left">play mode, <code>circulation</code>, <code>random</code>, <code>single</code>, <code>order</code></td></tr><tr><td style="text-align:left">data-autoplay</td><td style="text-align:center"><code>false</code></td><td style="text-align:left">autoplay song(s), not supported by mobile browsers</td></tr><tr><td style="text-align:left">data-mutex</td><td style="text-align:center"><code>true</code></td><td style="text-align:left">pause other players when this player playing</td></tr><tr><td style="text-align:left">data-listmaxheight</td><td style="text-align:center"><code>340px</code></td><td style="text-align:left">max height of play list</td></tr><tr><td style="text-align:left">data-preload</td><td style="text-align:center"><code>auto</code></td><td style="text-align:left">the way to load music, can be <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td style="text-align:left">data-theme</td><td style="text-align:center"><code>#ad7a86</code></td><td style="text-align:left">theme color</td></tr></tbody></table><p>more <a href="https://aplayer.js.org/docs/#/?id=options" target="_blank" rel="noopener">https://aplayer.js.org/docs/#/?id=options</a></p><h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><p>Use self music API, see also <a href="https://github.com/metowolf/Meting" target="_blank" rel="noopener">https://github.com/metowolf/Meting</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> meting_api=<span class="string">'http://example.com/api.php?server=:server&amp;type=:type&amp;id=:id&amp;r=:r'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/Meting.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h2><p><strong>MetingJS</strong> © <a href="https://github.com/metowolf" target="_blank" rel="noopener">metowolf</a>, Released under the <a href="./LICENSE">MIT</a> License.<br></p><blockquote><p>Blog <a href="https://i-meto.com" target="_blank" rel="noopener">@meto</a> · GitHub <a href="https://github.com/metowolf" target="_blank" rel="noopener">@metowolf</a> · Twitter <a href="https://twitter.com/metowolf" target="_blank" rel="noopener">@metowolf</a> · Telegram Channel <a href="https://t.me/metooooo" target="_blank" rel="noopener">@metooooo</a></p></blockquote><hr><p align="center"><br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fhu01y9uy7j305k04s3yc.jpg" alt="ADPlayer" width="100"><br></p><h1 id="APlayer"><a href="#APlayer" class="headerlink" title="APlayer"></a>APlayer</h1><hr><blockquote><p>Wow, such a lovely HTML5 music player</p></blockquote><p><a href="https://www.npmjs.com/package/aplayer" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/v/aplayer.svg?style=flat-square" alt="npm"></a><br><a href="https://github.com/MoePlayer/APlayer/blob/master/LICENSE" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/l/aplayer.svg?style=flat-square" alt="npm"></a><br><a href="https://www.npmjs.com/package/aplayer" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/dt/aplayer.svg?style=flat-square" alt="npm"></a><br><a href="https://github.com/MoePlayer/APlayer/tree/master/dist" target="_blank" rel="noopener"><img src="https://badge-size.herokuapp.com/MoePlayer/APlayer/master/dist/APlayer.min.js?compression=gzip&amp;style=flat-square" alt="size"></a><br><a href="https://travis-ci.org/MoePlayer/APlayer" target="_blank" rel="noopener"><img src="https://img.shields.io/travis/MoePlayer/APlayer.svg?style=flat-square" alt="Travis"></a><br><a href="https://david-dm.org/MoePlayer/APlayer#info=devDependencies" target="_blank" rel="noopener"><img src="https://img.shields.io/david/dev/MoePlayer/aplayer.svg?style=flat-square" alt="devDependency Status"></a><br><a href="https://github.com/MoePlayer/APlayer#donate" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/$-donate-ff69b4.svg?style=flat-square" alt="donate"></a></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><img src="https://i.imgur.com/JDrJXCr.png" alt="image"></p><p>APlayer is a lovely HTML5 music player to help people build audio easily.</p><p><strong>APlayer supports:</strong></p><ul><li>Media formats<ul><li>MP4 H.264 (AAC or MP3)</li><li>WAVE PCM</li><li>Ogg Theora Vorbis</li></ul></li><li>Features<ul><li>Playlist</li><li>Lyrics</li></ul></li></ul><p>Using APlayer on your project? <a href="https://github.com/MoePlayer/APlayer/issues/79" target="_blank" rel="noopener">Let me know!</a></p><p><strong><a href="http://aplayer.js.org" target="_blank" rel="noopener">Demo</a></strong></p><p><strong><a href="http://aplayer.js.org/docs" target="_blank" rel="noopener">Docs</a></strong></p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install aplayer --save</span></span><br></pre></td></tr></table></figure><h2 id="Quick-Start-1"><a href="#Quick-Start-1" class="headerlink" title="Quick Start"></a>Quick Start</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aplayer1"</span> <span class="attr">class</span>=<span class="string">"aplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/APlayer.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ap = <span class="keyword">new</span> APlayer(&#123;</span><br><span class="line">    element: <span class="built_in">document</span>.getElementById(<span class="string">'aplayer1'</span>),</span><br><span class="line">    music: &#123;</span><br><span class="line">        title: <span class="string">'Preparation'</span>,</span><br><span class="line">        author: <span class="string">'Hans Zimmer/Richard Harvey'</span>,</span><br><span class="line">        url: <span class="string">'Preparation.mp3'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p><a href="http://aplayer.js.org/docs" target="_blank" rel="noopener">Read the Docs</a></p><h2 id="CDN-1"><a href="#CDN-1" class="headerlink" title="CDN"></a>CDN</h2><ul><li><a href="https://www.jsdelivr.com/package/npm/aplayer" target="_blank" rel="noopener">jsDelivr</a></li><li><a href="https://cdnjs.com/libraries/aplayer" target="_blank" rel="noopener">cdnjs</a></li><li><a href="https://unpkg.com/aplayer/" target="_blank" rel="noopener">unpkg</a></li></ul><h2 id="Join-the-Discussion"><a href="#Join-the-Discussion" class="headerlink" title="Join the Discussion"></a>Join the Discussion</h2><ul><li><a href="https://t.me/adplayer" target="_blank" rel="noopener">Telegram Group</a></li><li><a href="https://shang.qq.com/wpa/qunwpa?idkey=bf22213ae0028a82e5adf3f286dfd4f01e0997dc9f1dcd8e831a0a85e799be17" target="_blank" rel="noopener">QQ Group</a>: 415835947</li></ul><h2 id="Related-Projects"><a href="#Related-Projects" class="headerlink" title="Related Projects"></a>Related Projects</h2><ul><li><a href="https://github.com/zgq354/APlayer-Typecho-Plugin" target="_blank" rel="noopener">APlayer-Typecho-Plugin</a></li><li><a href="https://github.com/grzhan/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a></li><li><a href="https://github.com/YUX-IO/163music-APlayer-you-get-docker" target="_blank" rel="noopener">163music-APlayer-you-get-docker</a></li><li><a href="https://github.com/liwanglin12/Hermit-X" target="_blank" rel="noopener">Hermit-X(APlayer for WordPress)</a></li><li><a href="https://github.com/SevenOutman/vue-aplayer" target="_blank" rel="noopener">vue-aplayer</a></li><li><a href="https://github.com/fghrsh/APlayer_for_Z-BlogPHP" target="_blank" rel="noopener">APlayer_for_Z-BlogPHP</a></li><li><a href="https://github.com/Daryl-L/php-aplayer" target="_blank" rel="noopener">php-aplayer</a></li><li><a href="https://github.com/sabrinaluo/react-aplayer" target="_blank" rel="noopener">react-aplayer</a></li><li><a href="https://github.com/MoeFE/vue-aplayer" target="_blank" rel="noopener">vue-aplayer</a></li><li><a href="https://github.com/Mashiro-Sorata/APlayer-Controler" target="_blank" rel="noopener">APlayer-Controler</a></li><li><a href="https://github.com/kn007/APlayerHandle" target="_blank" rel="noopener">APlayerHandle</a></li><li><a href="https://github.com/metowolf/MetingJS" target="_blank" rel="noopener">MetingJS</a></li><li>Feel free to submit yours in <a href="https://github.com/MoePlayer/APlayer/issues/79" target="_blank" rel="noopener"><code>Let me know!</code></a></li></ul><h2 id="Who-use-APlayer"><a href="#Who-use-APlayer" class="headerlink" title="Who use APlayer?"></a>Who use APlayer?</h2><ul><li><a href="http://www.chinaz.com/15year/index.html" target="_blank" rel="noopener">站长之家</a></li><li><a href="http://thefatrat.cn/" target="_blank" rel="noopener">TheFatRat</a></li><li><a href="http://jellyrue.com/" target="_blank" rel="noopener">Jelly Rue</a></li><li><a href="http://lightmoon.pw" target="_blank" rel="noopener">Justice_Eternal吧曲谱资源站</a></li><li><a href="https://justice-eternal.github.io/" target="_blank" rel="noopener">Justice_Eternal吧曲谱资源站(移动端)</a></li><li><a href="https://www.lrcgc.com/diy" target="_blank" rel="noopener">歌词千寻</a></li><li><a href="http://i.oppsu.cn" target="_blank" rel="noopener">iSearch</a></li><li><a href="https://github.com/MoeFE/Lyric" target="_blank" rel="noopener">LRC歌词编辑器</a></li><li><a href="https://www.lovelivesupport.com/" target="_blank" rel="noopener">LLSupport</a></li><li><a href="https://aerostatica.ru/" target="_blank" rel="noopener">Аэростатика</a></li><li>Feel free to submit yours in <a href="https://github.com/MoePlayer/APlayer/issues/79" target="_blank" rel="noopener"><code>Let me know!</code></a></li></ul><h2 id="Donate"><a href="#Donate" class="headerlink" title="Donate"></a>Donate</h2><ul><li><a href="https://opencollective.com/aplayer" target="_blank" rel="noopener">Donate via OpenCollective</a></li><li><a href="https://www.paypal.me/DIYgod" target="_blank" rel="noopener">Donate via Paypal</a></li><li><a href="https://ws4.sinaimg.cn/large/006tKfTcgy1fhu1uowywej307s07st8h.jpg" target="_blank" rel="noopener">Donate via WeChat Pay</a></li><li><a href="https://ws4.sinaimg.cn/large/006tKfTcgy1fhu1vf4ih7j307s07sdfm.jpg" target="_blank" rel="noopener">Donate via Alipay</a></li><li>Donate via Bitcoin: 13CwQLHzPYm2tewNMSJBeArbbRM5NSmCD1</li></ul><h2 id="Sponsor"><a href="#Sponsor" class="headerlink" title="Sponsor"></a>Sponsor</h2><p>Thank you to all our sponsors!</p><table><br>  <tbody><br>    <tr><br>      <td align="center" valign="middle"><br>        <a href="https://console.upyun.com/register/?invite=BkLZ2Xqob" target="_blank"><br>          <img width="222px" src="https://imgur.com/apG1uKf.png"><br>        </a><br>      </td><br>    </tr><br>  </tbody><br></table><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><p>This project exists thanks to all the people who contribute.</p><p><a href="https://github.com/MoePlayer/APlayer/graphs/contributors" target="_blank" rel="noopener"><img src="https://opencollective.com/APlayer/contributors.svg?width=890"></a></p><h2 id="Backers"><a href="#Backers" class="headerlink" title="Backers"></a>Backers</h2><p>Thank you to all our backers!</p><p><a href="https://opencollective.com/APlayer#backers" target="_blank"><img src="https://opencollective.com/APlayer/backers.svg?width=890"></a></p><h2 id="Author-1"><a href="#Author-1" class="headerlink" title="Author"></a>Author</h2><p><strong>APlayer</strong> © <a href="https://github.com/DIYgod" target="_blank" rel="noopener">DIYgod</a>, Released under the <a href="./LICENSE">MIT</a> License.<br><br>Authored and maintained by DIYgod with help from contributors (<a href="https://github.com/DIYgod/APlayer/contributors" target="_blank" rel="noopener">list</a>).</p><blockquote><p><a href="https://diygod.me" target="_blank" rel="noopener">Blog</a> · GitHub <a href="https://github.com/DIYgod" target="_blank" rel="noopener">@DIYgod</a> · Twitter <a href="https://twitter.com/DIYgod" target="_blank" rel="noopener">@DIYgod</a> · Telegram Channel <a href="https://t.me/awesomeDIYgod" target="_blank" rel="noopener">@awesomeDIYgod</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;br&gt;&lt;img class=&quot;img-no-bd&quot; src=&quot;https://user-images.githubusercontent.com/2666735/30651452-58ae6c88-9deb-11e7-9e13-6beae3f6c54c.png&quot; alt=&quot;Meting&quot;&gt;&lt;br&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;br&gt;&lt;a style=&quot;display: inline-block;&quot; href=&quot;https://i-meto.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img class=&quot;img-no-bd&quot; alt=&quot;Author&quot; src=&quot;https://img.shields.io/badge/Author-METO-blue.svg?style=flat-square&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a style=&quot;display: inline-block;&quot; href=&quot;https://www.npmjs.com/package/meting&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img class=&quot;img-no-bd&quot; alt=&quot;Version&quot; src=&quot;https://img.shields.io/npm/v/meting.svg?style=flat-square&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a style=&quot;display: inline-block;&quot; href=&quot;https://travis-ci.org/metowolf/MetingJS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img class=&quot;img-no-bd&quot; alt=&quot;Travis&quot; src=&quot;https://img.shields.io/travis/metowolf/MetingJS.svg?style=flat-square&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a style=&quot;display: inline-block;&quot; href=&quot;&quot;&gt;&lt;img class=&quot;img-no-bd&quot; alt=&quot;License&quot; src=&quot;https://img.shields.io/npm/l/meting.svg?style=flat-square&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;!-- data-id=&quot;60198&quot; --&gt;
&lt;div class=&quot;aplayer&quot; data-id=&quot;1984937420&quot; data-server=&quot;netease&quot; data-autoplay=&quot;false&quot; data-type=&quot;playlist&quot;&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://rusyue.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="游戏" scheme="https://rusyue.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="音乐" scheme="https://rusyue.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="黑暗之魂" scheme="https://rusyue.com/tags/%E9%BB%91%E6%9A%97%E4%B9%8B%E9%AD%82/"/>
    
      <category term="DarkSouls" scheme="https://rusyue.com/tags/DarkSouls/"/>
    
  </entry>
  
  <entry>
    <title>深圳世界之窗</title>
    <link href="https://rusyue.com/2018/02/16/%E6%B7%B1%E5%9C%B3%E4%B8%96%E7%95%8C%E4%B9%8B%E7%AA%97/"/>
    <id>https://rusyue.com/2018/02/16/深圳世界之窗/</id>
    <published>2018-02-16T12:40:36.000Z</published>
    <updated>2018-02-19T11:22:18.218Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><a href="https://i.loli.net/2018/02/16/5a86dbcd31365.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-x675aoaexmo0000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dbcd31365.jpg" alt="IMG_20180216_120605.jpg"></a></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/16/5a86dbcdb29d3.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-x675aoaexmo0000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dbcdb29d3.jpg" alt="IMG_20180216_120020.jpg"></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/16/5a86dbcd1948b.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-x675aoaexmo0000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dbcd1948b.jpg" alt="IMG_20180216_114543.jpg"></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/16/5a86dbcddc309.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-x675aoaexmo0000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dbcddc309.jpg" alt="IMG_20180216_120043.jpg"></a></div></div></div></div><a id="more"></a><hr><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><a href="https://i.loli.net/2018/02/16/5a86dbcf38e68.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-5q5p99aty7g00000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dbcf38e68.jpg" alt="IMG_20180216_112803.jpg"></a></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><a href="https://i.loli.net/2018/02/16/5a86dbcdefe60.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-5q5p99aty7g00000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dbcdefe60.jpg" alt="IMG_20180216_120749.jpg"></a></div><div class="group-picture-column" style="width: 50%;"><a href="https://i.loli.net/2018/02/16/5a86dbcf5f73b.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-5q5p99aty7g00000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dbcf5f73b.jpg" alt="IMG_20180216_114523.jpg"></a></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><a href="https://i.loli.net/2018/02/16/5a86dc5d37ad8.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-5q5p99aty7g00000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dc5d37ad8.jpg" alt="IMG_20180216_150540.jpg"></a></div><div class="group-picture-column" style="width: 50%;"><a href="https://i.loli.net/2018/02/16/5a86dc5d5cc4f.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-5q5p99aty7g00000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dc5d5cc4f.jpg" alt="IMG_20180216_121803.jpg"></a></div></div></div></div><hr><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><a href="https://i.loli.net/2018/02/16/5a86dc5b40cc6.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-sx2rh2oq6j40000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dc5b40cc6.jpg" alt="IMG_20180216_122518.jpg"></a></div><div class="group-picture-column" style="width: 50%;"><a href="https://i.loli.net/2018/02/16/5a86dc5c196d9.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-sx2rh2oq6j40000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dc5c196d9.jpg" alt="IMG_20180216_150517.jpg"></a></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/16/5a86dc5c5ef70.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-sx2rh2oq6j40000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dc5c5ef70.jpg" alt="IMG_20180216_121755.jpg"></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/16/5a86dbcd61cc2.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-sx2rh2oq6j40000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dbcd61cc2.jpg" alt="IMG_20180216_105903.jpg"></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/16/5a86dc5d1ba3d.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-sx2rh2oq6j40000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dc5d1ba3d.jpg" alt="IMG_20180216_121112.jpg"></a></div></div></div></div><hr><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><a href="https://i.loli.net/2018/02/16/5a86dc5cf3d11.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-193p8jdfpxs0000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dc5cf3d11.jpg" alt="IMG_20180216_125301.jpg"></a></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/16/5a86dc5ca31ff.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-193p8jdfpxs0000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dc5ca31ff.jpg" alt="IMG_20180216_121158.jpg"></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/16/5a86dbcd28176.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-193p8jdfpxs0000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dbcd28176.jpg" alt="IMG_20180216_115654.jpg"></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/16/5a86dc5cdf581.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-193p8jdfpxs0000000" target="_blank"><img src="https://i.loli.net/2018/02/16/5a86dc5cdf581.jpg" alt="IMG_20180216_120810.jpg"></a></div></div></div></div><!-- Delete Link[IMG_20180216_114543.jpg](https://sm.ms/delete/mvsPldxK4IqkHbU)[IMG_20180216_115654.jpg](https://sm.ms/delete/m5YPnyjMITst7ES)[IMG_20180216_120605.jpg](https://sm.ms/delete/EnuT5aSjNY34sKF)[IMG_20180216_105903.jpg](https://sm.ms/delete/rcmyajMHv8QAJ6d)[IMG_20180216_120020.jpg](https://sm.ms/delete/GOJiQb8tRwjDyT6)[IMG_20180216_120043.jpg](https://sm.ms/delete/Bb4eoH3h9RANn1m)[IMG_20180216_120749.jpg](https://sm.ms/delete/bNKgfH9liwYhjBF)[IMG_20180216_111408.jpg](https://sm.ms/delete/bERKPWol9OXqkUs)[IMG_20180216_112803.jpg](https://sm.ms/delete/drzUic59OsnZoeq)[IMG_20180216_114523.jpg](https://sm.ms/delete/8lymsfC4TJtjLXG)[IMG_20180216_122518.jpg](https://sm.ms/delete/ON6tAgIe1oDFVLy)[IMG_20180216_150517.jpg](https://sm.ms/delete/4M9QDOW78CBziA3)[IMG_20180216_121755.jpg](https://sm.ms/delete/TVvNzRsKGYuJpP1)[IMG_20180216_121158.jpg](https://sm.ms/delete/4JgDMemKCr8H9v7)[IMG_20180216_120810.jpg](https://sm.ms/delete/EKbJ9Oq6Re3AoZX)[IMG_20180216_125301.jpg](https://sm.ms/delete/Nf9WMk2g6OLmrGT)[IMG_20180216_121112.jpg](https://sm.ms/delete/MW6B3rVuNAz9dEv)[IMG_20180216_150540.jpg](https://sm.ms/delete/OYmExR1yieHJT4N)[IMG_20180216_121803.jpg](https://sm.ms/delete/jpabhfsIRdluASr)-->]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;width: 100%;&quot;&gt;&lt;a href=&quot;https://i.loli.net/2018/02/16/5a86dbcd31365.jpg&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;noopener&quot; data-fancybox=&quot;group-x675aoaexmo0000000&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://i.loli.net/2018/02/16/5a86dbcd31365.jpg&quot; alt=&quot;IMG_20180216_120605.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;&lt;a href=&quot;https://i.loli.net/2018/02/16/5a86dbcdb29d3.jpg&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;noopener&quot; data-fancybox=&quot;group-x675aoaexmo0000000&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://i.loli.net/2018/02/16/5a86dbcdb29d3.jpg&quot; alt=&quot;IMG_20180216_120020.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;&lt;a href=&quot;https://i.loli.net/2018/02/16/5a86dbcd1948b.jpg&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;noopener&quot; data-fancybox=&quot;group-x675aoaexmo0000000&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://i.loli.net/2018/02/16/5a86dbcd1948b.jpg&quot; alt=&quot;IMG_20180216_114543.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;&lt;a href=&quot;https://i.loli.net/2018/02/16/5a86dbcddc309.jpg&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;noopener&quot; data-fancybox=&quot;group-x675aoaexmo0000000&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://i.loli.net/2018/02/16/5a86dbcddc309.jpg&quot; alt=&quot;IMG_20180216_120043.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="图集" scheme="https://rusyue.com/categories/%E5%9B%BE%E9%9B%86/"/>
    
    
      <category term="图集" scheme="https://rusyue.com/tags/%E5%9B%BE%E9%9B%86/"/>
    
      <category term="游记" scheme="https://rusyue.com/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="深圳" scheme="https://rusyue.com/tags/%E6%B7%B1%E5%9C%B3/"/>
    
      <category term="世界之窗" scheme="https://rusyue.com/tags/%E4%B8%96%E7%95%8C%E4%B9%8B%E7%AA%97/"/>
    
  </entry>
  
  <entry>
    <title>崩坏3 除夕活动</title>
    <link href="https://rusyue.com/2018/02/12/%E5%B4%A9%E5%9D%8F3-%E9%99%A4%E5%A4%95%E6%B4%BB%E5%8A%A8/"/>
    <id>https://rusyue.com/2018/02/12/崩坏3-除夕活动/</id>
    <published>2018-02-12T04:37:18.000Z</published>
    <updated>2018-02-19T16:23:25.754Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">第一组</th><th style="text-align:center">第二组</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DNyMTO2giNfZmbjl2ah5Wb9Ub5D%2Ba59W75vSo5Ria59Wo5zOY6ACL5Ry" title="第一组 第一个" target="_blank" rel="noopener">第一个</a></td><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DNyMTO2giNfZmbjl2ah5Wb9Ub5D%2Ba59W75vSo5Ria59Wo5zOY6ACL5Ry" title="第一组 第一个" target="_blank" rel="noopener">第一个</a></td></tr><tr><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0zM4UDMwACOfZmbjl2ah5Wb9UL5NiZ6ye55EqZ54Kb68G" title="第一组 第二个" target="_blank" rel="noopener">第二个</a></td><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0zM4UDMwACOfZmbjl2ah5Wb9UL5NiZ6ye55EqZ54Kb68G" title="第一组 第二个" target="_blank" rel="noopener">第二个</a></td></tr><tr><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0TMxkzM1YCNfZmbjl2ah5Wb9Uo5nCo5fSI632a5Y6Z5oy75%2FqY5R%2B45Mm" title="第一组 第三个" target="_blank" rel="noopener">第三个</a></td><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0TMxkzM1YCNfZmbjl2ah5Wb9Uo5nCo5fSI632a5Y6Z5oy75%2FqY5R%2B45Mm" title="第一组 第三个" target="_blank" rel="noopener">第三个</a></td></tr><tr><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0TM3AzMzEiNfZmbjl2ah5Wb9UTM0NOacW%2BoBm%2BlJeQq%3D%3D" title="第一组 第四个" target="_blank" rel="noopener">第四个</a></td><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0TM3AzMzEiNfZmbjl2ah5Wb9UTM0NOacW%2BoBm%2BlJeQq%3D%3D" title="第一组 第四个" target="_blank" rel="noopener">第四个</a></td></tr><tr><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0jMyADMzQSMfZmbjl2ah5Wb9Uo5%2FSa5nSL5fyb59%2Bo5gK55A2L5g2" title="第一组 第五个" target="_blank" rel="noopener">第五个</a></td><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0jMyADMzQSMfZmbjl2ah5Wb9Uo5%2FSa5nSL5fyb59%2Bo5gK55A2L5g2" title="第一组 第五个" target="_blank" rel="noopener">第五个</a></td></tr><tr><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DNyAjN2AiMfZmbjl2ah5Wb9U559mY6Oea5Bi" title="第一组 第六个" target="_blank" rel="noopener">第六个</a></td><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DNyAjN2AiMfZmbjl2ah5Wb9U559mY6Oea5Bi" title="第一组 第六个" target="_blank" rel="noopener">第六个</a></td></tr><tr><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DM1YzN0USNfZmbjl2ah5Wb9UY5v%2Bo5cC55EqI6BCY5B2L5Ji" title="第一组 第十三个" target="_blank" rel="noopener">第十三个</a></td><td style="text-align:center"><a href="https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DM1YzN0USNfZmbjl2ah5Wb9UY5v%2Bo5cC55EqI6BCY5B2L5Ji" title="第一组 第十三个" target="_blank" rel="noopener">第十三个</a></td></tr></tbody></table><blockquote><p>活动需要扫描二维码,浏览器不能解析本地二维码，所以临时传到这里用一下……</p></blockquote><a id="more"></a><h3 id="自动点击"><a href="#自动点击" class="headerlink" title="自动点击"></a>自动点击</h3><hr><h4 id="油猴子"><a href="#油猴子" class="headerlink" title="油猴子"></a>油猴子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name        崩坏3除夕活动自动点击</span></span><br><span class="line"><span class="comment">// @namespace   rusyue.com</span></span><br><span class="line"><span class="comment">// @include     *://event.bh3.com/bh3_2018spring_festival/friends*</span></span><br><span class="line"><span class="comment">// @version     1</span></span><br><span class="line"><span class="comment">// @grant       none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line"></span><br><span class="line">btn.setAttribute(<span class="string">'style'</span>, <span class="string">'width: 100px; height: 30px; position: fixed; top: 10px; right: 10px; line-height: 30px; box-shadow: 1px 1px 1.6px 1.6px rgba(0,0,0,0.4); cursor: pointer; border-radius: 2px; color: #333;'</span>);</span><br><span class="line">btn.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'开始点击'</span>));</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, startClick, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(btn);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> live = <span class="built_in">document</span>.querySelector(<span class="string">'.live'</span>);</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    live.click();</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        live.click();</span><br><span class="line">        ++count &lt;= <span class="number">750</span> &amp;&amp; setTimeout(cb, <span class="number">5</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台直接输入"><a href="#控制台直接输入" class="headerlink" title="控制台直接输入"></a>控制台直接输入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">startClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> live = <span class="built_in">document</span>.querySelector(<span class="string">'.live'</span>);</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    live.click();</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        live.click();</span><br><span class="line">        ++count &lt;= <span class="number">750</span> &amp;&amp; setTimeout(cb, <span class="number">5</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><hr><h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><hr><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><a href="https://i.loli.net/2018/02/12/5a8119bbb2b3a.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-2v7tkanrhoc0000000" target="_blank"><img src="https://i.loli.net/2018/02/12/5a8119bbb2b3a.jpg" alt="第一个.jpg"></a></div><div class="group-picture-column" style="width: 50%;"><a href="https://i.loli.net/2018/02/12/5a8119bbc5805.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-2v7tkanrhoc0000000" target="_blank"><img src="https://i.loli.net/2018/02/12/5a8119bbc5805.jpg" alt="第二个.jpg"></a></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><a href="https://i.loli.net/2018/02/12/5a8119bbd8f59.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-2v7tkanrhoc0000000" target="_blank"><img src="https://i.loli.net/2018/02/12/5a8119bbd8f59.jpg" alt="第三个.jpg"></a></div><div class="group-picture-column" style="width: 50%;"><a href="https://i.loli.net/2018/02/12/5a8119bc04416.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-2v7tkanrhoc0000000" target="_blank"><img src="https://i.loli.net/2018/02/12/5a8119bc04416.jpg" alt="第四个.jpg"></a></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/12/5a8119bc614f8.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-2v7tkanrhoc0000000" target="_blank"><img src="https://i.loli.net/2018/02/12/5a8119bc614f8.jpg" alt="第五个.jpg"></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/12/5a8119be37412.png" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-2v7tkanrhoc0000000" target="_blank"><img src="https://i.loli.net/2018/02/12/5a8119be37412.png" alt="第六个.png"></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://i.loli.net/2018/02/13/5a82cd5723940.png" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-2v7tkanrhoc0000000" target="_blank"><img src="https://i.loli.net/2018/02/13/5a82cd5723940.png" alt="第十三个.png"></a></div></div></div></div><!-- 第一组的链接 --><!-- 第二组的链接 --><!--### Delete LinkA---https://sm.ms/delete/7ZfS1UgFy9OHtPvhttps://sm.ms/delete/UVh8SY2i41bpTEHhttps://sm.ms/delete/ehYTPIldjBqXE6Khttps://sm.ms/delete/MDlpjindOTRKfCWhttps://sm.ms/delete/1sW4L8wKOfit9ANhttps://sm.ms/delete/T6yIfLSliVkxYXHhttps://sm.ms/delete/Y5jLcb9dSsIAfaZ -->]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;第一组&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;第二组&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DNyMTO2giNfZmbjl2ah5Wb9Ub5D%2Ba59W75vSo5Ria59Wo5zOY6ACL5Ry&quot; title=&quot;第一组 第一个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第一个&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DNyMTO2giNfZmbjl2ah5Wb9Ub5D%2Ba59W75vSo5Ria59Wo5zOY6ACL5Ry&quot; title=&quot;第一组 第一个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第一个&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0zM4UDMwACOfZmbjl2ah5Wb9UL5NiZ6ye55EqZ54Kb68G&quot; title=&quot;第一组 第二个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第二个&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0zM4UDMwACOfZmbjl2ah5Wb9UL5NiZ6ye55EqZ54Kb68G&quot; title=&quot;第一组 第二个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第二个&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0TMxkzM1YCNfZmbjl2ah5Wb9Uo5nCo5fSI632a5Y6Z5oy75%2FqY5R%2B45Mm&quot; title=&quot;第一组 第三个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第三个&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0TMxkzM1YCNfZmbjl2ah5Wb9Uo5nCo5fSI632a5Y6Z5oy75%2FqY5R%2B45Mm&quot; title=&quot;第一组 第三个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第三个&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0TM3AzMzEiNfZmbjl2ah5Wb9UTM0NOacW%2BoBm%2BlJeQq%3D%3D&quot; title=&quot;第一组 第四个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第四个&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0TM3AzMzEiNfZmbjl2ah5Wb9UTM0NOacW%2BoBm%2BlJeQq%3D%3D&quot; title=&quot;第一组 第四个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第四个&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0jMyADMzQSMfZmbjl2ah5Wb9Uo5%2FSa5nSL5fyb59%2Bo5gK55A2L5g2&quot; title=&quot;第一组 第五个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第五个&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0jMyADMzQSMfZmbjl2ah5Wb9Uo5%2FSa5nSL5fyb59%2Bo5gK55A2L5g2&quot; title=&quot;第一组 第五个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第五个&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DNyAjN2AiMfZmbjl2ah5Wb9U559mY6Oea5Bi&quot; title=&quot;第一组 第六个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第六个&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DNyAjN2AiMfZmbjl2ah5Wb9U559mY6Oea5Bi&quot; title=&quot;第一组 第六个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第六个&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DM1YzN0USNfZmbjl2ah5Wb9UY5v%2Bo5cC55EqI6BCY5B2L5Ji&quot; title=&quot;第一组 第十三个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第十三个&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://event.bh3.com/bh3_2018spring_festival/friends.html?auth=3XpVDZx0DM1YzN0USNfZmbjl2ah5Wb9UY5v%2Bo5cC55EqI6BCY5B2L5Ji&quot; title=&quot;第一组 第十三个&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第十三个&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;活动需要扫描二维码,浏览器不能解析本地二维码，所以临时传到这里用一下……&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://rusyue.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="游戏" scheme="https://rusyue.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="崩坏3" scheme="https://rusyue.com/tags/%E5%B4%A9%E5%9D%8F3/"/>
    
      <category term="手游" scheme="https://rusyue.com/tags/%E6%89%8B%E6%B8%B8/"/>
    
      <category term="二刺猿" scheme="https://rusyue.com/tags/%E4%BA%8C%E5%88%BA%E7%8C%BF/"/>
    
  </entry>
  
  <entry>
    <title>Group pictures test</title>
    <link href="https://rusyue.com/2018/02/11/group-pictures-test/"/>
    <id>https://rusyue.com/2018/02/11/group-pictures-test/</id>
    <published>2018-02-11T08:40:08.000Z</published>
    <updated>2018-02-19T11:22:12.163Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><a href="https://notes.iissnan.com/uploads/group-pics/menu-restaurant-vintage-tab.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-stgdt12jxtc0000000" target="_blank"><img src="https://notes.iissnan.com/uploads/group-pics/menu-restaurant-vintage-tab.jpg" alt="第一个.jpg"></a></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://notes.iissnan.com/uploads/group-pics/esWWGbF.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-stgdt12jxtc0000000" target="_blank"><img src="https://notes.iissnan.com/uploads/group-pics/esWWGbF.jpg" alt="第二个.jpg"></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://notes.iissnan.com/uploads/group-pics/ZCogT10.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-stgdt12jxtc0000000" target="_blank"><img src="https://notes.iissnan.com/uploads/group-pics/ZCogT10.jpg" alt="第三个.jpg"></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="https://notes.iissnan.com/uploads/group-pics/24hrPQn.jpg" class="fancybox fancybox.image" rel="noopener" data-fancybox="group-stgdt12jxtc0000000" target="_blank"><img src="https://notes.iissnan.com/uploads/group-pics/24hrPQn.jpg" alt="第四个.jpg"></a></div></div></div></div><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;width: 100%;&quot;&gt;&lt;a href=&quot;https://notes.iissnan.com/uploads/group-pics/menu-restaurant-vintage-tab.jpg&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;noopener&quot; data-fancybox=&quot;group-stgdt12jxtc0000000&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://notes.iissnan.com/uploads/group-pics/menu-restaurant-vintage-tab.jpg&quot; alt=&quot;第一个.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;&lt;a href=&quot;https://notes.iissnan.com/uploads/group-pics/esWWGbF.jpg&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;noopener&quot; data-fancybox=&quot;group-stgdt12jxtc0000000&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://notes.iissnan.com/uploads/group-pics/esWWGbF.jpg&quot; alt=&quot;第二个.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;&lt;a href=&quot;https://notes.iissnan.com/uploads/group-pics/ZCogT10.jpg&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;noopener&quot; data-fancybox=&quot;group-stgdt12jxtc0000000&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://notes.iissnan.com/uploads/group-pics/ZCogT10.jpg&quot; alt=&quot;第三个.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;&lt;a href=&quot;https://notes.iissnan.com/uploads/group-pics/24hrPQn.jpg&quot; class=&quot;fancybox fancybox.image&quot; rel=&quot;noopener&quot; data-fancybox=&quot;group-stgdt12jxtc0000000&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://notes.iissnan.com/uploads/group-pics/24hrPQn.jpg&quot; alt=&quot;第四个.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="图集" scheme="https://rusyue.com/categories/%E5%9B%BE%E9%9B%86/"/>
    
    
      <category term="图集" scheme="https://rusyue.com/tags/%E5%9B%BE%E9%9B%86/"/>
    
      <category term="相册" scheme="https://rusyue.com/tags/%E7%9B%B8%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>浏览器背后的故事</title>
    <link href="https://rusyue.com/2017/07/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>https://rusyue.com/2017/07/13/浏览器背后的故事/</id>
    <published>2017-07-13T14:14:13.000Z</published>
    <updated>2018-02-19T16:02:45.940Z</updated>
    
    <content type="html"><![CDATA[<p>当服务器提供了资源资源（HTML css js images等），浏览器会执行下面的操作：</p><ol><li>解析 —— HTML css js</li><li>渲染 —— DOM树 =&gt; render树 =&gt; 布局 =&gt; paint</li></ol><a id="more"></a><h3 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h3><ol><li>UI</li><li>渲染引擎</li><li>浏览器引擎：UI与渲染引擎协调工作</li><li>网络组件：网络调用如 http等</li><li>js引擎：解析与执行js</li><li>数据存储：数据存储组件</li></ol><h3 id="HTML解析"><a href="#HTML解析" class="headerlink" title="HTML解析"></a>HTML解析</h3><p>get DOM tree</p><ol><li>渲染引擎从网络层取得请求的文档，8k/chunk进行传输</li><li>解析成DOM树</li><li>遇到外部资源标签，一边开始下载，一边继续解析</li></ol><p><strong>发生阻塞的情况：</strong></p><p>CSSOM阻塞js执行，js执行阻塞DOM构建</p><h3 id="CSS解析"><a href="#CSS解析" class="headerlink" title="CSS解析"></a>CSS解析</h3><p>get css rule tree</p><p> <img src="https://raw.githubusercontent.com/IssacSix/gitImags/master/20180109/browser.jpg" alt="浏览器渲染过程"></p><h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><ul><li>通过遍历DOM节点树创建一个“Frame 树”或“渲染树”，并计算每个节点的各个CSS样式值</li><li>通过累加子节点的宽度，该节点的水平内边距(padding)、边框(border)和外边距(margin)，自底向上的计算”Frame 树”中每个节点的首选(preferred)宽度</li><li>通过自顶向下的给每个节点的子节点分配可行宽度，计算每个节点的实际宽度</li><li>通过应用文字折行、累加子节点的高度和此节点的内边距(padding)、边框(border)和外边距(margin)，自底向上的计算每个节点的高度</li><li>使用上面的计算结果构建每个节点的坐标</li><li>当存在元素使用 <code>floated</code>，位置有 <code>absolutely</code> 或 <code>relatively</code> 属性的时候，会有更多复杂的计算，详见<a href="http://dev.w3.org/csswg/css2/" target="_blank" rel="noopener">http://dev.w3.org/csswg/css2/</a> 和 <a href="http://www.w3.org/Style/CSS/current-work" target="_blank" rel="noopener">http://www.w3.org/Style/CSS/current-work</a></li><li>创建layer(层)来表示页面中的哪些部分可以成组的被绘制，而不用被重新栅格化处理。每个帧对象都被分配给一个层</li><li>页面上的每个层都被分配了纹理(?)</li><li>每个层的帧对象都会被遍历，计算机执行绘图命令绘制各个层，此过程可能由CPU执行栅格化处理，或者直接通过D2D/SkiaGL在GPU上绘制</li><li>上面所有步骤都可能利用到最近一次页面渲染时计算出来的各个值，这样可以减少不少计算量</li><li>计算出各个层的最终位置，一组命令由 Direct3D/OpenGL发出，GPU命令缓冲区清空，命令传至GPU并异步渲染，帧被送到Window Server</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当服务器提供了资源资源（HTML css js images等），浏览器会执行下面的操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解析 —— HTML css js&lt;/li&gt;
&lt;li&gt;渲染 —— DOM树 =&amp;gt; render树 =&amp;gt; 布局 =&amp;gt; paint&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="浏览器" scheme="https://rusyue.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="内核" scheme="https://rusyue.com/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="解析" scheme="https://rusyue.com/tags/%E8%A7%A3%E6%9E%90/"/>
    
      <category term="渲染" scheme="https://rusyue.com/tags/%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>那些坑死的人的巨坑</title>
    <link href="https://rusyue.com/2017/07/13/%E9%82%A3%E4%BA%9B%E5%9D%91%E6%AD%BB%E4%BA%BA%E7%9A%84%E5%9D%91/"/>
    <id>https://rusyue.com/2017/07/13/那些坑死人的坑/</id>
    <published>2017-07-13T14:14:13.000Z</published>
    <updated>2018-02-19T16:09:35.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h4 id="样式兼容"><a href="#样式兼容" class="headerlink" title="样式兼容"></a>样式兼容</h4><p><strong>common bitch</strong></p><ol><li><p>移动端经典搞事情案例：click300ms延迟（14年已被chrome剔除，现在的移动端基本没有这个坑爹现象）</p><p>原因：区分移动端单击、双击，故意做了300ms延迟，wtf ？14年的我已经开始入门切图仔了 T-T</p><p>解决：</p><ol><li>禁止缩放 设置meta标签</li><li>fastclick</li><li>有些库已经做了封装，such as zepto的touch事件 不会有这种bug</li></ol></li></ol><a id="more"></a><p><strong>android bitch</strong></p><ol><li><p>现象：安卓qq浏览器 视频自动播放默认全屏</p><p>解决：微信浏览器可设置微信相关属性，如果适配要求高，推荐使用播放器插件</p></li><li><p>button 按下后有默认黄色边框</p><p>解决：outline: none</p></li><li><p>如果你想在移动端页面使用绝对定位布局？死了这条心吧，有input（输入）的地方，必死无疑！</p><p>解决：乖乖用flex布局吧</p><p>​</p></li></ol><p><strong>ios bitch</strong></p><ol><li><p>现象：iso 长文本不流畅，android 反而很流畅</p><p>解决：</p><ul><li>-webkit-overflow-scrolling: touch   //当手指从触摸屏上移开，会保持一段时间的滚动</li><li>-webkit-overflow-scrolling: auto  //当手指从触摸屏上移开，滚动会立即停止</li></ul></li><li><p>现象：iOS  safari微信浏览器等 :active 失效</p><p>解决：<code>&lt;button ontouchstart=&quot;&quot;&gt;&lt;/button&gt;</code> or <code>&lt;body ontouchstart=&quot;&quot;&gt;&lt;/body&gt;</code>     // 想比较不利于性能</p><p>原因：移动端touch速度快到浏览器难以捕捉到行为的触发，手动增加touch事件，通知浏览器有touch事件</p></li><li><p>现象：input首写字母默认大写</p><p>解决：<code>&lt;input type=&quot;text&quot; autocapitalize=&quot;none&quot;&gt;</code></p></li><li><p>现象：识别长串数字为tel</p><p>解决：添加meta <meta name="format-detection" content="telephone=no"></p></li></ol><h4 id="js兼容问题"><a href="#js兼容问题" class="headerlink" title="js兼容问题"></a>js兼容问题</h4><p>只考虑高级浏览器跟移动端</p><h4 id="混合开发兼容问题"><a href="#混合开发兼容问题" class="headerlink" title="混合开发兼容问题"></a>混合开发兼容问题</h4><p><strong>hybird bitch</strong></p><ol><li><p>native webview功能相互迁移或者有相关的修改，需考虑版本兼容问题</p></li><li><p>webview h5导航问题</p></li><li><p>浏览器window对象下的有些方法的使用需要native支持，比如navigator、alert、localStorage等</p><p>​</p></li></ol><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol><li>API若是跨域请求，若涉及cookie，需要注意：<ul><li>需要设置携带cookie：Access-Control-Allow-credential: true</li><li>origin：<em> 与 设置携带cookie设置项冲突，origin不可设置 </em></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h3&gt;&lt;h4 id=&quot;样式兼容&quot;&gt;&lt;a href=&quot;#样式兼容&quot; class=&quot;headerlink&quot; title=&quot;样式兼容&quot;&gt;&lt;/a&gt;样式兼容&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;common bitch&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;移动端经典搞事情案例：click300ms延迟（14年已被chrome剔除，现在的移动端基本没有这个坑爹现象）&lt;/p&gt;
&lt;p&gt;原因：区分移动端单击、双击，故意做了300ms延迟，wtf ？14年的我已经开始入门切图仔了 T-T&lt;/p&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;禁止缩放 设置meta标签&lt;/li&gt;
&lt;li&gt;fastclick&lt;/li&gt;
&lt;li&gt;有些库已经做了封装，such as zepto的touch事件 不会有这种bug&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://rusyue.com/tags/JavaScript/"/>
    
      <category term="兼容" scheme="https://rusyue.com/tags/%E5%85%BC%E5%AE%B9/"/>
    
      <category term="CSS" scheme="https://rusyue.com/tags/CSS/"/>
    
      <category term="踩坑" scheme="https://rusyue.com/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>理解格式块上下文(BFC)</title>
    <link href="https://rusyue.com/2017/06/22/%E7%90%86%E8%A7%A3%E6%A0%BC%E5%BC%8F%E5%9D%97%E4%B8%8A%E4%B8%8B%E6%96%87(BFC)/"/>
    <id>https://rusyue.com/2017/06/22/理解格式块上下文(BFC)/</id>
    <published>2017-06-22T14:41:23.000Z</published>
    <updated>2018-02-19T16:03:33.170Z</updated>
    
    <content type="html"><![CDATA[<p>在问格式块上下文之前，我们回顾一个问题：</p><p>Q: 行与块的区别是什么？</p><p>A：主要是以下三个区别</p><ol><li>块独占一行（最明显的区别）</li><li>可以容纳块或行为子元素</li><li>行元素不能设置height、line-height、margin-top、margin-bottom</li></ol><a id="more"></a><p><strong>开始进入主题</strong></p><p>Q: 什么是格式块上下文？</p><p>A: 块级盒模型发生的区域…</p><p>Q: 什么情况下会触发bfc？</p><p>A: 那情况就多了，个人常用元素罗列一下，不常用的不管了 ：）</p><ul><li>display: inline-block、flex、grid、table-cell等</li><li>float</li><li>position: absolute、fixed</li><li>overflow</li></ul><p><strong>触发BFC会有什么影响？</strong></p><p>在布局过程中，我们往往会使用float、flex、定位等来实现我们想要的布局，效果的实现伴随的副作用的出现，比如：</p><ol><li>浮动对夫、兄元素带来的麻烦（夫：高度，兄：图文环绕）</li><li>合并外边距</li></ol><p>Q：什么是合并外边距？</p><p>A：两个相邻盒子的外边距结合成一个单独的外边距的现象称为合并外边距，也叫折叠外边距</p><p>Q：怎么计算合并后的边距？</p><p>A：也是三种计算规则：</p><ul><li>正正，边距取最大值</li><li>负负，边距取绝对值最大值</li><li>正负，边距取相加之和</li></ul><p>Q：产生折叠的必要条件？</p><p>A：两个margin紧挨…</p><p>Q：如何算是两个盒子margin边距紧挨？</p><p>A：<strong>敲黑板！</strong></p><ul><li>必须是处于常规文档流的块级盒子，并且处在同一个BFC中</li><li>没有clearance，没有padding，border隔开</li><li>垂直方向上的外边距满足以下任意情况，即可召唤神龙<ul><li>元素的margin-top与其第一个常规文档流的子元素的margin-top</li><li>元素的margin-bottom与其下一个常规文档流的兄弟元素的margin-top</li><li>height为auto的元素的margin-bottom与其最后一个常规文档流的子元素的margin-bottom</li><li>高度为0并且最小高度也为0，不包含常规文档流的子元素，并且自身没有建立新的BFC的元素的margin-top和margin-bottom</li></ul></li></ul><p><strong>Generally speaking 如何解决外边距折叠的问题？</strong></p><ol><li>clearance、给1px的padding或者margin</li><li>父子关系：父元素触发BFC，使子元素处于非常规文档流中</li><li>兄弟关系：按需求触发BFC</li><li>inline-block：无论父子还是兄弟，都不会产生折叠边距</li><li>如何触发BFC ? 请爬楼，请爬楼…</li></ol><blockquote><p>Over 日常随便写写…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在问格式块上下文之前，我们回顾一个问题：&lt;/p&gt;
&lt;p&gt;Q: 行与块的区别是什么？&lt;/p&gt;
&lt;p&gt;A：主要是以下三个区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;块独占一行（最明显的区别）&lt;/li&gt;
&lt;li&gt;可以容纳块或行为子元素&lt;/li&gt;
&lt;li&gt;行元素不能设置height、line-height、margin-top、margin-bottom&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://rusyue.com/tags/CSS/"/>
    
      <category term="盒模型" scheme="https://rusyue.com/tags/%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="BFC" scheme="https://rusyue.com/tags/BFC/"/>
    
      <category term="flex" scheme="https://rusyue.com/tags/flex/"/>
    
      <category term="float" scheme="https://rusyue.com/tags/float/"/>
    
      <category term="浮动" scheme="https://rusyue.com/tags/%E6%B5%AE%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>HTML DOCTYPE 标签</title>
    <link href="https://rusyue.com/2017/06/02/HTML-DOCTYPE-%E6%A0%87%E7%AD%BE/"/>
    <id>https://rusyue.com/2017/06/02/HTML-DOCTYPE-标签/</id>
    <published>2017-06-02T10:22:35.000Z</published>
    <updated>2018-02-19T15:53:01.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML-DOCTYPE-标签"><a href="#HTML-DOCTYPE-标签" class="headerlink" title="HTML DOCTYPE 标签"></a>HTML DOCTYPE 标签</h2><h4 id="Doctype是什么？点击查看详解"><a href="#Doctype是什么？点击查看详解" class="headerlink" title="Doctype是什么？点击查看详解"></a>Doctype是什么？<a href="http://baike.baidu.com/link?url=m22fNdtgIp-_H25sPY4D-29MqjQAZ1Ei3WOXvNCs1ag-C-9aQwLLmoQ0XDP4M-MTiMbEOAisya8kyIZjrQCLR_" target="_blank" rel="noopener">点击查看详解</a></h4><ul><li>&lt;!DOCTYPE&gt; 声明帮助浏览器正确地显示网页。</li><li>web世界中存在着很多不同的文档，只有了解了文档类型，浏览器才能正确的显示文档。这就是<code>&lt;!DOCTYPE&gt;</code>的用处。</li><li>&lt;!DoCTYPE&gt;并不是html标签，它为浏览器提供一项信息（声明），即HTML是什么版本编写的。</li><li>所有浏览器都支持 <code>&lt;!DOCTYPE&gt;</code>声明。<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4>带有 HTML5 DOCTYPE 的 HTML 文档：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title of the document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">The content of the document......</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="HTML-发展版本"><a href="#HTML-发展版本" class="headerlink" title="HTML 发展版本"></a>HTML 发展版本</h4><p>从 Web 诞生早期至今，已经发展出多个 HTML 版本：</p><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">年份</th></tr></thead><tbody><tr><td style="text-align:center">HTML</td><td style="text-align:center">1991</td></tr><tr><td style="text-align:center">HTML+</td><td style="text-align:center">1992</td></tr><tr><td style="text-align:center">HTML2.0</td><td style="text-align:center">1995</td></tr><tr><td style="text-align:center">HTML3.2</td><td style="text-align:center">1997</td></tr><tr><td style="text-align:center">HTML 4.01</td><td style="text-align:center">1999</td></tr><tr><td style="text-align:center">XHTML 1.0</td><td style="text-align:center">2000</td></tr><tr><td style="text-align:center">HTML5</td><td style="text-align:center">2012</td></tr><tr><td style="text-align:center">XHTML5</td><td style="text-align:center">2013</td></tr></tbody></table><a id="more"></a><h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><blockquote><p>提示：请始终向 HTML 文档添加<code>&lt;!DOCTYPE&gt;</code>声明，这样浏览器才能获知文档类型。</p></blockquote><ul><li><code>&lt;!DOCTYPE&gt;</code> 声明必须是 HTML 文档的第一行，位于<html>标签之前</html></li><li><code>&lt;!DOCTYPE&gt;</code> 不是html标签，它是只是web浏览器关于使用哪个HTML版本经行编写的指令</li><li>在 HTML 4.01 中，&lt;!DOCTYPE&gt; 声明引用 DTD，因为 HTML 4.01 基于 <a href="http://baike.baidu.com/link?url=lLkTzGmAcVG4ggZoPciTk2M-2AvOklW3wCAuVo_Z7UQ8azh2fCLTKegub_hzqccfYJwCkct7TCPvAb88DLsw9g8ygC32TxY9p-_4sCLDSfhaJd3kL9qc-2NmGvb72sgNHK-XXmukTvWWPIc4KkCEWa" target="_blank" rel="noopener">SGML</a>。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。</li><li>HTML5 不基于 SGML，所以不需要引用 DTD。</li></ul><p><strong>HTML 4.01 与 HTML5 之间的差异</strong><br>在 HTML 4.01 中有三种 &lt;!DOCTYPE&gt; 声明。在 HTML5 中只有一种：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="http://www.w3school.com.cn/tags/html_ref_dtd.asp" target="_blank" rel="noopener">点击查看HTML 元素表</a>，其中列出了每种元素会出现在哪个文档类型中。</p><h4 id="提示和注释"><a href="#提示和注释" class="headerlink" title="提示和注释"></a>提示和注释</h4><ul><li>注释：<code>&lt;!DOCTYPE&gt;</code> 声明没有结束标签。</li><li>提示：<code>&lt;!DOCTYPE&gt;</code> 声明对大小写不敏感。</li><li>提示：请使用 <a href="http://validator.w3.org/" target="_blank" rel="noopener">W3C 的验证器</a>来检查您是否编写了有效的 HTML / XHTML 文档！<br>####常用的 DOCTYPE 声明<br><strong>HTML5</strong><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>HTML 4.01 Strict</strong><br>该DTD包含所有html元素和属性，但不包括展示性和启用的元素（如font）,不允许框架Framesets。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>HTML 4.01 Transitional</strong><br>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>HTML 4.01 Frameset</strong><br>该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd"&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>XHTML 1.0 Strict</strong><br>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>XHTML 1.0 Transitional</strong><br>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>XHTML 1.0 Frameset</strong><br>该 DTD 等同于 XHTML 1.0 Transitional，但允许框架集内容。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>XHTML 1.1</strong><br>该 DTD 等同于 XHTML 1.0 Strict，但允许添加模型（例如提供对东亚语系的 ruby 支持）。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML-DOCTYPE-标签&quot;&gt;&lt;a href=&quot;#HTML-DOCTYPE-标签&quot; class=&quot;headerlink&quot; title=&quot;HTML DOCTYPE 标签&quot;&gt;&lt;/a&gt;HTML DOCTYPE 标签&lt;/h2&gt;&lt;h4 id=&quot;Doctype是什么？点击查看详解&quot;&gt;&lt;a href=&quot;#Doctype是什么？点击查看详解&quot; class=&quot;headerlink&quot; title=&quot;Doctype是什么？点击查看详解&quot;&gt;&lt;/a&gt;Doctype是什么？&lt;a href=&quot;http://baike.baidu.com/link?url=m22fNdtgIp-_H25sPY4D-29MqjQAZ1Ei3WOXvNCs1ag-C-9aQwLLmoQ0XDP4M-MTiMbEOAisya8kyIZjrQCLR_&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看详解&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&amp;lt;!DOCTYPE&amp;gt; 声明帮助浏览器正确地显示网页。&lt;/li&gt;
&lt;li&gt;web世界中存在着很多不同的文档，只有了解了文档类型，浏览器才能正确的显示文档。这就是&lt;code&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/code&gt;的用处。&lt;/li&gt;
&lt;li&gt;&amp;lt;!DoCTYPE&amp;gt;并不是html标签，它为浏览器提供一项信息（声明），即HTML是什么版本编写的。&lt;/li&gt;
&lt;li&gt;所有浏览器都支持 &lt;code&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/code&gt;声明。&lt;h4 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h4&gt;带有 HTML5 DOCTYPE 的 HTML 文档：&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Title of the document&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	The content of the document......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;HTML-发展版本&quot;&gt;&lt;a href=&quot;#HTML-发展版本&quot; class=&quot;headerlink&quot; title=&quot;HTML 发展版本&quot;&gt;&lt;/a&gt;HTML 发展版本&lt;/h4&gt;&lt;p&gt;从 Web 诞生早期至今，已经发展出多个 HTML 版本：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;版本&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;年份&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;HTML&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1991&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;HTML+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1992&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;HTML2.0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1995&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;HTML3.2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1997&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;HTML 4.01&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;XHTML 1.0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;HTML5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;XHTML5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="浏览器" scheme="https://rusyue.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="兼容" scheme="https://rusyue.com/tags/%E5%85%BC%E5%AE%B9/"/>
    
      <category term="HTML" scheme="https://rusyue.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>ES6模块化温故知新</title>
    <link href="https://rusyue.com/2017/05/29/ES6%E6%A8%A1%E5%9D%97%E5%8C%96%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0/"/>
    <id>https://rusyue.com/2017/05/29/ES6模块化温故知新/</id>
    <published>2017-05-29T11:25:40.000Z</published>
    <updated>2018-02-19T16:19:51.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6-Module"><a href="#ES6-Module" class="headerlink" title="ES6 Module"></a>ES6 Module</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>  （没啥知新的，主要就是温故，就是整体过一遍）</p><p>  对于js模块化这点内容，我觉得其实有点坑的，CommonJS + ES6自身的模块化机制，让很多新入门的同学傻傻分不清楚。</p><p>  模块化是每种语言都有的功能，就连css都有@import，但是ES6之前没有原生的api支持，除非使用CommonJS 或者 AMD，成为客户端跟服务端的模块化解决方案。</p><p>  ES6延用的是CommonJS的规范，但是有别与CommonJS。</p><ol><li><strong>尽量的静态化</strong></li><li><strong>代码块</strong></li><li><p><strong>动态绑定输出值</strong>，CommonJS对输出值缓存，es6及时更新</p><p>因为CommonJS“运行时加载”的特性，使得其运行后才能得到这个对象，注意是 <strong>一个对象</strong>，但ES6的设计思想是尽量的静态化，es6的模块不是一个对象，而是通过export 再 import之后的 <strong>代码块</strong>，使得在编译时就完成了加载。</p></li></ol><a id="more"></a><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="export"><a href="#export" class="headerlink" title="export"></a>export</h4><p>export可输出的类型 变量、函数、类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">'Ding'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'Issac'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;firstName, lastName&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数 或 类</span></span><br><span class="line"><span class="keyword">export</span> multiply = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出默认变量或者方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认default 命令注意点：</p><ol><li>一个模块只能有一个默认输出</li><li>import 可以不加大括号</li><li>声明变量必须在export default 之前</li><li>export default 也可以输出类</li></ol><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><ol><li>import会执行所加载的模块</li><li>import命令具有提升效果，编译阶段会提升到整个模块的头部</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span> <span class="comment">// 引入默认类</span></span><br></pre></td></tr></table></figure><h4 id="整体加载模块"><a href="#整体加载模块" class="headerlink" title="整体加载模块"></a>整体加载模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逐一加载</span></span><br><span class="line"><span class="keyword">import</span> &#123; area, circumference &#125; <span class="keyword">from</span> <span class="string">'./circle'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'圆面积：'</span> + area(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'圆周长：'</span> + circumference(<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整体加载</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// blablabla 同上</span></span><br></pre></td></tr></table></figure><h4 id="按需加载-import"><a href="#按需加载-import" class="headerlink" title="按需加载 import()"></a>按需加载 import()</h4><p>由于import 编译时加载，有一个<a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noopener">提案</a>，建议引入<code>import()</code>函数，完成动态加载</p><p>举个🌰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> main = <span class="built_in">document</span>.querySelector(<span class="string">'main'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">`./section-modules/<span class="subst">$&#123;someVariable&#125;</span>.js`</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">module</span>.loadPageInto(main);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    main.textContent = err.message;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><strong>动态加载</strong></p><p>区别于node require import 异步加载，require 同步</p><p>使用场合：</p><ol><li><p>按需加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">button.addEventListener(<span class="string">'click'</span>, event =&gt; &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./dialogBox.js'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">dialogBox</span> =&gt;</span> &#123;</span><br><span class="line">    dialogBox.open();</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* Error handling */</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>条件加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'moduleA'</span>).then(...);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'moduleB'</span>).then(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>动态的模块路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(f())</span><br><span class="line">.then(...);</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意点：</strong></p><ol><li><p>import() 模块加载成功后，作为一个对象，当作then方法中的参数。</p></li><li><p>import() 也可以用在async函数中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> myModule = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'./myModule.js'</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123;export1, export2&#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'./myModule.js'</span>);</span><br><span class="line">  <span class="keyword">const</span> [module1, module2, module3] =</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">'./module1.js'</span>),</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">'./module2.js'</span>),</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">'./module3.js'</span>),</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES6-Module&quot;&gt;&lt;a href=&quot;#ES6-Module&quot; class=&quot;headerlink&quot; title=&quot;ES6 Module&quot;&gt;&lt;/a&gt;ES6 Module&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;  （没啥知新的，主要就是温故，就是整体过一遍）&lt;/p&gt;
&lt;p&gt;  对于js模块化这点内容，我觉得其实有点坑的，CommonJS + ES6自身的模块化机制，让很多新入门的同学傻傻分不清楚。&lt;/p&gt;
&lt;p&gt;  模块化是每种语言都有的功能，就连css都有@import，但是ES6之前没有原生的api支持，除非使用CommonJS 或者 AMD，成为客户端跟服务端的模块化解决方案。&lt;/p&gt;
&lt;p&gt;  ES6延用的是CommonJS的规范，但是有别与CommonJS。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;尽量的静态化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码块&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;动态绑定输出值&lt;/strong&gt;，CommonJS对输出值缓存，es6及时更新&lt;/p&gt;
&lt;p&gt;因为CommonJS“运行时加载”的特性，使得其运行后才能得到这个对象，注意是 &lt;strong&gt;一个对象&lt;/strong&gt;，但ES6的设计思想是尽量的静态化，es6的模块不是一个对象，而是通过export 再 import之后的 &lt;strong&gt;代码块&lt;/strong&gt;，使得在编译时就完成了加载。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://rusyue.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://rusyue.com/tags/ES6/"/>
    
      <category term="Module" scheme="https://rusyue.com/tags/Module/"/>
    
  </entry>
  
  <entry>
    <title>JS中的类型转换</title>
    <link href="https://rusyue.com/2017/05/23/JS%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://rusyue.com/2017/05/23/JS中的类型转换/</id>
    <published>2017-05-23T14:41:31.000Z</published>
    <updated>2018-02-19T15:35:31.035Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">转字符串</th><th style="text-align:center">数字</th><th style="text-align:center">布尔值</th><th style="text-align:center">对象</th></tr></thead><tbody><tr><td style="text-align:center">undefined</td><td style="text-align:center">‘undefined’</td><td style="text-align:center">0</td><td style="text-align:center">false</td><td style="text-align:center">throws TypeError</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">‘null’</td><td style="text-align:center">0</td><td style="text-align:center">false</td><td style="text-align:center">throws TypeError</td></tr><tr><td style="text-align:center">true</td><td style="text-align:center">‘true’</td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center">new Boolean(true)</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">‘false’</td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">new Boolean(false)</td></tr><tr><td style="text-align:center">‘’ (空字符串)</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center">false</td><td style="text-align:center">new String(‘’)</td></tr><tr><td style="text-align:center">‘1.2’(数字字符串)</td><td style="text-align:center"></td><td style="text-align:center">1.2</td><td style="text-align:center">true</td><td style="text-align:center">new String(‘1.2’)</td></tr><tr><td style="text-align:center">‘shiny’(非数字字符串)</td><td style="text-align:center"></td><td style="text-align:center">NaN</td><td style="text-align:center">true</td><td style="text-align:center">new String(‘shiny’)</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">‘0’</td><td style="text-align:center"></td><td style="text-align:center">false</td><td style="text-align:center">new Number(0)</td></tr><tr><td style="text-align:center">-0</td><td style="text-align:center">‘0’</td><td style="text-align:center"></td><td style="text-align:center">false</td><td style="text-align:center">new Number(-0)</td></tr><tr><td style="text-align:center">Infinity</td><td style="text-align:center">‘Infinity’</td><td style="text-align:center"></td><td style="text-align:center">true</td><td style="text-align:center">new Number(Infinity)</td></tr><tr><td style="text-align:center">-Infinity</td><td style="text-align:center">‘-Infinity’</td><td style="text-align:center"></td><td style="text-align:center">true</td><td style="text-align:center">new Number(-Infinity)</td></tr><tr><td style="text-align:center">33</td><td style="text-align:center">‘33’</td><td style="text-align:center"></td><td style="text-align:center">true</td><td style="text-align:center">new Number(33)</td></tr><tr><td style="text-align:center">{} (任意对象)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">true</td><td style="text-align:center">new Number(NaN)</td></tr><tr><td style="text-align:center">[]</td><td style="text-align:center">‘’</td><td style="text-align:center">0</td><td style="text-align:center">true</td><td style="text-align:center">new Number(NaN)</td></tr><tr><td style="text-align:center">[33]</td><td style="text-align:center">‘33’</td><td style="text-align:center">33</td><td style="text-align:center">true</td><td style="text-align:center">new Number(NaN)</td></tr><tr><td style="text-align:center">[‘a’]</td><td style="text-align:center">‘a’</td><td style="text-align:center">NaN</td><td style="text-align:center">true</td><td style="text-align:center">new Number(NaN)</td></tr><tr><td style="text-align:center">function(){}</td><td style="text-align:center"></td><td style="text-align:center">NaN</td><td style="text-align:center">true</td><td style="text-align:center">new Number(NaN)</td></tr></tbody></table><ul><li>原始值转对象很简单，原始值通过调用String()，Number()，Boolean()构造函数，转换为他们各自的包装对象。<code>null</code>和<code>undefined</code>属于例外，当将他们用在期望是一个对象的地方都会造成一个类型错误(TypeErroe)异常，而不会执行正常的转换。</li><li>对象转换相对复杂，下面具体描述</li></ul><a id="more"></a><h3 id="转换和相等性"><a href="#转换和相等性" class="headerlink" title="转换和相等性"></a>转换和相等性</h3><p>由于JS可以做灵活的类型转换，因此其<code>==</code>相等运算符也随相等的含义灵活多变。例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>       <span class="comment">// 这两值被认为相等</span></span><br><span class="line"><span class="string">'0'</span>  == <span class="number">0</span>               <span class="comment">// 前面的字符串转为了数字</span></span><br><span class="line"> <span class="number">0</span>   == <span class="literal">false</span>           <span class="comment">// 比较之前布尔值转成了数字</span></span><br><span class="line"><span class="string">'0'</span>  == <span class="literal">false</span>           <span class="comment">// 比较前字符串和布尔值都转成了数字</span></span><br></pre></td></tr></table></figure></p><p><code>==</code>一个值转换为另一个值并不意味着两个值相等。比如，如果在期望使用布尔值的地方使用了undefined，它将会转换为false，但这并不表明<code>undefined == false</code>。<br><strong>JS运算符和语句期望使用多样化的数据类型，并可以相互转换。if语句将undefined转换为false，但<code>==</code>运算符从不试图将其操作数转换为布尔值。</strong></p><blockquote><p>相等运算符<code>==</code>比较并不严格。如果两个操作数不是同一类型，那么相等运算符会尝试进行一些类型转换，然后进行比较：</p></blockquote><ul><li>如果两个操作数的类型相同，则根据值进行比较，也就是类似于严格相等(<code>===</code>)进行比较。</li><li>如果两个操作数类型不同，<code>==</code>相等操作符也可能会认为他们相等。检测相等将会遵守如下规则和类型转换：<br>1、如果一个值是null，另一个是undefined，则它们相等。<br>2、如果一个值是数字，另一个是字符串，先将字符串转换为数字，然后使用转换后的值进行比较。<br>3、如果其中一个值是true，则将其转为1再进行比较。如果其中一个值是false，则将其转换为0再进行比较。<br>4、如果一个值是对象，另一个值是数字或字符串，则将对象转为原始值，然后再进行比较。对象通过toString()方法或者valueOf()方法转换为原始值。JS语言核心的内置首先尝试使用valueOf()，再尝试使用toString()，除了日期类，日期类只是用toString()转换。那些不是JS语言核心中的对象则通过各自的实现中定义的方法转换为原始值。<br>5、其他不同类型之间的比较均不相等。</li></ul><h3 id="显示类型转换"><a href="#显示类型转换" class="headerlink" title="显示类型转换"></a>显示类型转换</h3><ul><li>做显示类型转换最简单的方法就是使用Boolean()、Number()、String()或Object()函数。当不通过new运算符调用这些函数时，它们会作为类型转换函数：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'3'</span>)         <span class="comment">// =&gt; 3</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">false</span>)       <span class="comment">// =&gt; 'false'</span></span><br><span class="line"><span class="built_in">Boolean</span>([])         <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">Object</span>(<span class="number">3</span>)           <span class="comment">// =&gt; new Number(3)</span></span><br></pre></td></tr></table></figure></li></ul><p>需要注意的是，除了null或undefined之外的任何值都具有toString()方法，这个方法执行结果通常和String()方法的返回结果一致。</p><ul><li><p>JS中某些运算符会做隐式的类型转换，又是用户类型转换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x+<span class="string">''</span>            <span class="comment">// 等价于String('x')</span></span><br><span class="line">+x              <span class="comment">// 等价于Number(x).也可以写成x-0</span></span><br><span class="line">!!x             <span class="comment">// 等价于Boolean(x).注意是双叹号。</span></span><br><span class="line"><span class="number">10</span>+<span class="string">'shiny'</span>      <span class="comment">// '10shiny',数字10转换为字符串</span></span><br><span class="line"><span class="string">'7'</span>*<span class="string">'4'</span>         <span class="comment">// 28，两个字符串均转换为数字</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">1</span> - <span class="string">'x'</span> <span class="comment">// NaN: 字符串x无法转换为数字</span></span><br><span class="line">n + <span class="string">'shiny'</span>     <span class="comment">// 'NaN shiny': NaN转换为字符串NaN</span></span><br></pre></td></tr></table></figure></li><li><p>Number类定义的toString()方法可以接收表示转换基数(radix)的可选参数，如果不指定此参数，转换规则将是基于十进制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">var</span> a = n.toString(<span class="number">2</span>);          <span class="comment">// 转化为 ‘10001’</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'0'</span> + n.toString(<span class="number">8</span>);    <span class="comment">// 转换为‘021’</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">'0x'</span> + n.toString(<span class="number">16</span>);  <span class="comment">// 转换为‘0x11'</span></span><br></pre></td></tr></table></figure></li><li><p>如果通过Number()转换函数传入一个字符串，它会试图将其转化为一个整数或浮点数直接量，这个方法只能基于十进制数进行转换，并且不能出现非法的尾随字符。parseInt()函数和parseFloat()函数（它们是全局函数，不从属于任何类的方法）更加灵活。parseInt()可以接收第二个可选参数，这个参数指定数字转换的基数，合法的取值范围是2-36。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'1 shinygang'</span>)          <span class="comment">// =&gt; 3</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'3.14 shinygang'</span>)     <span class="comment">// =&gt; 3.14</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'-12.33'</span>)               <span class="comment">// =&gt; -12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'0xff'</span>)                 <span class="comment">// =&gt; 255</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'.1'</span>)                 <span class="comment">// =&gt; 0.1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'.1'</span>)                   <span class="comment">// =&gt; NaN，整数不能以'.'开始</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'11'</span>, <span class="number">2</span>)                <span class="comment">// =&gt; 3 (1*2+1)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'ff'</span>, <span class="number">16</span>)               <span class="comment">// =&gt; 255 (15*16+15)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="对象转换为原始值"><a href="#对象转换为原始值" class="headerlink" title="对象转换为原始值"></a>对象转换为原始值</h3><ul><li>对象到布尔值的转换非常简单：所有对象(包括数组和函数)都转换为true。对于包装对象亦是如此：new Boolean(false)是一个对象而不是原始值，它江转换为true。</li><li>对象到字符串和对象到数字的转换都是通过调用带转换对象的一个方法来完成的。JS对象有两个不同的方法来执行转换：toString()和valueOf()<br><strong>toString():</strong>它的作用是返回一个反应这个对象的字符串。默认的toString()方法并不会返回一个有趣的值。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;).toString()      <span class="comment">// =&gt; "[object Object]"</span></span><br></pre></td></tr></table></figure></li></ul><p>很多类定义了更多特定版本的toString()方法。例如，数组类的toString()方法将每个数组元素转换为一个字符串，并在元素之间添加逗号后合并成结果字符串。函数类的toString()方法返回这个函数的实现定义表示方式。日期类定义的toString()方法返回了一个可读的日期和时间字符串。RegExp类定义的toString()方法将RegExp对象转换为表示正则表达式直接量的字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].toString()                  <span class="comment">// =&gt; "1,2,3"</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;f(x);&#125;).toString()     <span class="comment">// =&gt; "function(x)&#123;\n f(x); \n&#125;"</span></span><br><span class="line">/\d/g.toString()                    <span class="comment">// =&gt; "/\\d/g"</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2010</span>,<span class="number">0</span>,<span class="number">1</span>).toString()       <span class="comment">// =&gt; "Fri Jan 01 2010 00:00:00 GMT+0800 (CST)"</span></span><br></pre></td></tr></table></figure></p><p><strong>valueOf():</strong>如果存在任意原始值，它就默认将对象转换为表示它的原始值。对象是复合值，而且大多数对象无法真正表示为一个原始值，因此默认valueOf()方法简单地返回对象本身，而不是返回一个原始值。数组、函数和正则表达式简单地继承了这个默认方法，调用这些类型的实例的valueOf()方法只是简单返回对象本身。日期则返回对应毫秒数。<br>3..1、JS中对象到字符串的转换经过了如下这些步骤：</p><ul><li>如果对象具有toString()方法，则调用这个方法。如果他返回一个原始值，JS将这个原始值转换为字符串，并返回这个字符串结果。</li><li>如果对象没有toString()方法，或这个方法并不返回一个原始值，那么JS会调用valueOf()方法。如果存在这个方法，则JS调用它。如果返回值是原始值，JS将这个值转换为字符串，并返回这个字符串结果。</li><li>否则，JS无法从toString()或valueOf()获得一个原始值，因此这时它将抛出一个类型错误异常。<br>3.2、在对象到数字的转换过程中，JS做了同样的事情，只是它会首先尝试使用valueOf()方法：</li><li>如果对象具有valueOf()方法，后者返回一个原始值，则JS将这个原始值转换为数字返回</li><li>否则，如果对象具有toString()方法，返回一个原始值，则JS将其转换并返回</li><li>否则，JS抛出一个类型异常错误。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;值&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;转字符串&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;数字&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;布尔值&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;对象&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;undefined&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘undefined’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;throws TypeError&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;null&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘null’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;throws TypeError&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘true’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Boolean(true)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘false’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Boolean(false)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘’ (空字符串)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new String(‘’)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘1.2’(数字字符串)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1.2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new String(‘1.2’)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘shiny’(非数字字符串)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NaN&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new String(‘shiny’)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘0’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Number(0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘0’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Number(-0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Infinity&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘Infinity’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Number(Infinity)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-Infinity&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘-Infinity’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Number(-Infinity)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;33&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘33’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Number(33)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;{} (任意对象)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Number(NaN)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Number(NaN)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[33]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘33’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;33&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Number(NaN)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[‘a’]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;‘a’&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NaN&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Number(NaN)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;function(){}&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NaN&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new Number(NaN)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;原始值转对象很简单，原始值通过调用String()，Number()，Boolean()构造函数，转换为他们各自的包装对象。&lt;code&gt;null&lt;/code&gt;和&lt;code&gt;undefined&lt;/code&gt;属于例外，当将他们用在期望是一个对象的地方都会造成一个类型错误(TypeErroe)异常，而不会执行正常的转换。&lt;/li&gt;
&lt;li&gt;对象转换相对复杂，下面具体描述&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://rusyue.com/tags/JavaScript/"/>
    
      <category term="类型转换" scheme="https://rusyue.com/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="运算符" scheme="https://rusyue.com/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="ECMA" scheme="https://rusyue.com/tags/ECMA/"/>
    
  </entry>
  
  <entry>
    <title>fun fact about null</title>
    <link href="https://rusyue.com/2017/05/14/fun-fact-about-null/"/>
    <id>https://rusyue.com/2017/05/14/fun-fact-about-null/</id>
    <published>2017-05-14T12:40:36.000Z</published>
    <updated>2018-02-19T15:20:36.901Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看<a href="http://www.ituring.com.cn/book/1488" target="_blank" rel="noopener">《你不知道的JavaScript》</a>这本书，发现了一些关于<code>null</code>的有趣事实。</p><p>众所周知，JavaScript有7种基本类型：</p><ul><li>null</li><li>undefined</li><li>object</li><li>number</li><li>string</li><li>boolean</li><li>symbol (es6新增)</li></ul><p>这7种数据类型中，<code>null</code>表示空值，它也是比较特殊的一个数据类型。</p><p>说出来你可能不信，对null进行<code>typeof</code>的结果竟然是。。。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> === <span class="string">"object"</span>  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>欸！！？？（黑人问号脸）</p><p>这应该算是JavaScript的一个bug，但是书上说这个bug由来已久，在JavaScript里存在了近20年，也许永远的不会修复，因为这牵涉到太多的web系统，要是修复的话可能会产生更多的bug。</p><p>那么问题来了，如何判定一个变量的类型是null呢？（如果typeof运算对其返回object的话）</p><a id="more"></a><p>答案是：需要使用符合条件对齐进行判定：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">(!a &amp;&amp; <span class="keyword">typeof</span> a ===<span class="string">"object"</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>null是所有基本类型中唯一的一个假值（也就是说<code>!null===true</code>)，但typeof对它的返回值是object。</p><p>还有一个有趣的事实是，虽然<code>function</code>是<code>object</code>的一个子类型，但<code>typeof</code>对其的返回值是<code>function</code>而不是<code>object</code>，至于其他<code>object</code>的子类型，例如<code>Array</code>，就没有这么特殊的待遇了，<code>typeof</code>对它们的返回一律是<code>object</code>。</p><p>尽管null是不常使用的一个基本类型，但是一旦用上了，要是不熟悉这个特点的话，调bug可是一件非常痛苦的事情啦。</p><p>最后想大家安利这本书<a href="http://www.ituring.com.cn/book/1488" target="_blank" rel="noopener">《你不知道的JavaScript》</a>，里面讲了好多关于JavaScript的细节问题，如果想要学好JavaScript的话，这些细节可是不容忽视的哦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看&lt;a href=&quot;http://www.ituring.com.cn/book/1488&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《你不知道的JavaScript》&lt;/a&gt;这本书，发现了一些关于&lt;code&gt;null&lt;/code&gt;的有趣事实。&lt;/p&gt;
&lt;p&gt;众所周知，JavaScript有7种基本类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;symbol (es6新增)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这7种数据类型中，&lt;code&gt;null&lt;/code&gt;表示空值，它也是比较特殊的一个数据类型。&lt;/p&gt;
&lt;p&gt;说出来你可能不信，对null进行&lt;code&gt;typeof&lt;/code&gt;的结果竟然是。。。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; === &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;欸！！？？（黑人问号脸）&lt;/p&gt;
&lt;p&gt;这应该算是JavaScript的一个bug，但是书上说这个bug由来已久，在JavaScript里存在了近20年，也许永远的不会修复，因为这牵涉到太多的web系统，要是修复的话可能会产生更多的bug。&lt;/p&gt;
&lt;p&gt;那么问题来了，如何判定一个变量的类型是null呢？（如果typeof运算对其返回object的话）&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://rusyue.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://rusyue.com/tags/ES6/"/>
    
      <category term="读书笔记" scheme="https://rusyue.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>理解CSS盒子模型</title>
    <link href="https://rusyue.com/2017/05/02/CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E7%90%86%E8%A7%A3/"/>
    <id>https://rusyue.com/2017/05/02/CSS盒子模型理解/</id>
    <published>2017-05-02T13:24:35.000Z</published>
    <updated>2018-02-19T15:42:47.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解CSS盒子模型"><a href="#理解CSS盒子模型" class="headerlink" title="理解CSS盒子模型"></a>理解CSS盒子模型</h2><ul><li>网页设计中常听的属性名：内容(content)、填充(padding)、边框(border)、边界(margin)，CSS盒子模型都具备这些属性，也主要是这些属性。</li><li>这些属性我们可以把它转移到我们日常生活中的盒子(箱子)上来理解，日常生活中所见的盒子也就是能装东西的一种箱子，也具有这些属性，所以叫它盒子模型。</li><li>CSS盒子模型就是在网页设计中经常用到的CSS技术所使用的一种思维模型。</li><li>盒子模型是css中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 ie 盒子模型和标准 w3c 盒子模型。他们对盒子模型的解释各不相同。</li></ul><a id="more"></a><p><strong>标准盒子模型</strong><br><img src="https://ww1.sinaimg.cn/large/79462090jw1f1it8lp6ssj20kq0cnjs4.jpg" alt=""><br>从上图可以看到标准 w3c 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。</p><p><strong>ie 盒子模型</strong><br><img src="https://ww3.sinaimg.cn/large/79462090jw1f1it9z7ugkj20lz0cu0tf.jpg" alt=""><br>从上图可以看到 ie 盒子模型的范围也包括 margin、border、padding、content，和标准 w3c 盒子模型不同的是：ie 盒子模型的 content 部分包含了 border 和 pading。</p><p>例：一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，假如用标准 w3c 盒子模型解释，那么这个盒子需要占据的位置为：宽 20<em>2+1</em>2+10<em>2+200=262px、高 20</em>2+1<em>2</em>10<em>2+50=112px，盒子的实际大小为：宽 1</em>2+10<em>2+200=222px、高 1</em>2+10<em>2+50=72px；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 20</em>2+200=240px、高 20*2+50=70px，盒子的实际大小为：宽 200px、高 50px。</p><p>在 CSS 中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、提示：背景应用于由内容和内边距、边框组成的区域。</span><br><span class="line"><span class="number">2</span>、提示：内边距、边框和外边距可以应用于一个元素的所有边，也可以应用于单独的边。</span><br><span class="line"><span class="number">3</span>、提示：外边距可以是负值，而且在很多情况下都要使用负值的外边距。</span><br></pre></td></tr></table></figure></p><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p>一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。<br>虽然有方法解决这个问题。但是目前最好的解决方案是回避这个问题。也就是，不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素。</p><p><strong>那我们开发的时候选择哪中盒子模型呢？</strong><br>肯定是“标准 w3c 盒子模型”。怎么样才算是选择了“标准 w3c 盒子模型”呢？很简单，就是在网页的顶部加上 doctype 声明。假如不加 doctype 声明，那么各个浏览器会根据自己的行为去理解网页，即 ie 浏览器会采用 ie 盒子模型去解释你的盒子，而 ff 会采用标准 w3c 盒子模型解释你的盒子，所以网页在不同的浏览器中就显示的不一样了。反之，假如加上了 doctype 声明，那么所有浏览器都会采用标准 w3c 盒子模型去解释你的盒子，网页就能在各个浏览器中显示一致了。<br><code>所以为了让网页能兼容各个浏览器，让我们用标准 w3c 盒子模型。</code></p><h2 id="CSS3-box-sizing-属性"><a href="#CSS3-box-sizing-属性" class="headerlink" title="CSS3 box-sizing 属性"></a>CSS3 box-sizing 属性</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p><code>box-sizing</code> 属性允许您以特定的方式定义匹配某个区域的特定元素。<br><code>box-sizing</code>有两个值一个是<code>content-box</code>，另一个是<code>border-box</code>。<br>当设置为<code>box-sizing:content-box</code>时，将采用<code>*标准模式*</code>解析计算，也是默认模式；<br>当设置为<code>box-sizing:border-box</code>时，将采用<code>*怪异模式*</code>解析计算；<br>目前使用此属性需要前缀如下:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-webkit-<span class="built_in">box</span>-sizing: <span class="built_in">content</span>-<span class="built_in">box</span>;</span><br><span class="line">-moz-<span class="built_in">box</span>-sizing: <span class="built_in">content</span>-<span class="built_in">box</span>;</span><br><span class="line"><span class="built_in">box</span>-sizing: <span class="built_in">content</span>-<span class="built_in">box</span>|<span class="built_in">border</span>-<span class="built_in">box</span>|inherit;</span><br></pre></td></tr></table></figure></p><p>例如，假如您需要并排放置两个带边框的框，可通过将 box-sizing 设置为 “border-box”。这可令浏览器以<strong>怪异模式</strong>呈现出带有指定宽度和高度的框，并把边框和内边距放入框中。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;理解CSS盒子模型&quot;&gt;&lt;a href=&quot;#理解CSS盒子模型&quot; class=&quot;headerlink&quot; title=&quot;理解CSS盒子模型&quot;&gt;&lt;/a&gt;理解CSS盒子模型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;网页设计中常听的属性名：内容(content)、填充(padding)、边框(border)、边界(margin)，CSS盒子模型都具备这些属性，也主要是这些属性。&lt;/li&gt;
&lt;li&gt;这些属性我们可以把它转移到我们日常生活中的盒子(箱子)上来理解，日常生活中所见的盒子也就是能装东西的一种箱子，也具有这些属性，所以叫它盒子模型。&lt;/li&gt;
&lt;li&gt;CSS盒子模型就是在网页设计中经常用到的CSS技术所使用的一种思维模型。&lt;/li&gt;
&lt;li&gt;盒子模型是css中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 ie 盒子模型和标准 w3c 盒子模型。他们对盒子模型的解释各不相同。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="浏览器" scheme="https://rusyue.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="兼容" scheme="https://rusyue.com/tags/%E5%85%BC%E5%AE%B9/"/>
    
      <category term="CSS" scheme="https://rusyue.com/tags/CSS/"/>
    
      <category term="盒模型" scheme="https://rusyue.com/tags/%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>关于浏览器内核</title>
    <link href="https://rusyue.com/2017/04/26/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    <id>https://rusyue.com/2017/04/26/关于浏览器内核/</id>
    <published>2017-04-26T15:44:33.000Z</published>
    <updated>2018-02-19T15:08:23.941Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个前端程序员，浏览器是我们每天都要打交道的对象。众所周知，现在市面上有非常多的浏览器产品，而它们的内核也不尽相同，那么到底有那些浏览器内核，而不同的浏览器又使用了什么内核呢？今天我们就来捋一捋。</p><a id="more"></a><p>浏览器内核可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。JS 引擎则是解析 Javascript 语言，执行 javascript 语言来实现网页的动态效果。最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。有一个网页标准计划小组制作了一个 ACID 来测试引擎的兼容性和性能。内核的种类很多，如加上没什么人使用的非商业的免费内核，可能会有 10 多种，但是常见的浏览器内核可以分这5种：Trident、Gecko、Presto、Blink、Webkit。</p><h2 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h2><h3 id="Trident"><a href="#Trident" class="headerlink" title="Trident"></a>Trident</h3><p>Trident(IE内核)：该内核程序在1997年的IE4中首次被采用，是微软在Mosaic代码的基础之上修改而来的，并沿用到IE11，也被普遍称作”IE内核”。Trident实际上是一款开放的内核，其接口内核设计的相当成熟，因此才有许多采用IE内核而非IE的浏览器(壳浏览器)涌现。</p><p>由于IE本身的“垄断性”（虽然名义上IE并非垄断，但实际上，特别是从Windows 95年代一直到XP初期，就市场占有率来说IE的确借助Windows的东风处于“垄断”的地位）而使得Trident内核的长期一家独大，微软很长时间都并没有更新Trident内核，这导致了两个后果——一是Trident内核曾经几乎与W3C标准脱节（2005年），二是Trident内核的大量 Bug等安全性问题没有得到及时解决，然后加上一些致力于开源的开发者和一些学者们公开自己认为IE浏览器不安全的观点，也有很多用户转向了其他浏览器，Firefox和Opera就是这个时候兴起的。非Trident内核浏览器的市场占有率大幅提高也致使许多网页开发人员开始注意网页标准和非IE浏览器的浏览效果问题。<br>补充：IE从版本11开始，初步支持WebGL技术。IE8的JavaScript引擎是Jscript，IE9开始用Chakra，这两个版本区别很大，Chakra无论是速度和标准化方面都很出色。</p><p>Trident内核的常见浏览器有：IE6、IE7、IE8（Trident 4.0）、IE9（Trident 5.0）、IE10（Trident 6.0）； 360安全浏览器（1.0-5.0为Trident，6.0为Trident+Webkit，7.0为Trident+Blink）猎豹极轻浏览器，360极速浏览器（7.5之前为Trident+Webkit，7.5为Trident+Blink）猎豹安全浏览器（1.0-4.2版本为Trident+Webkit，4.3及以后版本为Trident+Blink）猎豹极轻浏览器，傲游浏览器（傲游1.x、2.x为IE内核，3.x为IE与Webkit双核）、百度浏览器（早期版本）、世界之窗浏览器（最初为IE内核，2013年采用Chrome+IE内核）、2345浏览器、腾讯TT、淘宝浏览器、采编读浏览器、搜狗高速浏览器（1.x为Trident，2.0及以后版本为Trident+Webkit）、阿云浏览器（早期版本）、瑞星安全浏览器、Slim Browser、 GreenBrowser、爱帆浏览器（12 之前版本）、115浏览器、155浏览器、闪游浏览器、N氧化碳浏览器、糖果浏览器、彩虹浏览器、瑞影浏览器、勇者无疆浏览器、114浏览器、蚂蚁浏览器、飞腾浏览器、速达浏览器、佐罗浏览器、海豚浏览器（iPhone/iPad/Android）、UC浏览器（Blink内核+Trident内核）等。</p><p>其中部分浏览器的新版本是“双核”甚至是“多核”，其中一个内核是Trident，然后再增加一个其他内核。国内的厂商一般把其他内核叫做“高速浏览模式”，而Trident则是“兼容浏览模式”，用户可以来回切换。</p><h3 id="Presto"><a href="#Presto" class="headerlink" title="Presto"></a>Presto</h3><p>Presto(Opera前内核) (已废弃)： Opera12.17及更早版本曾经采用的内核，现已停止开发并废弃，该内核在2003年的Opera7中首次被使用，该款引擎的特点就是渲染速度的优化达到了极致，然而代价是牺牲了网页的兼容性。</p><p>实际上这是一个动态内核，与前面几个内核的最大的区别就在脚本处理上，Presto有着天生的优势，页面的全部或者部分都能够在回应脚本事件时等情况下被重新解析。此外该内核在执行Javascrīpt的时候有着最快的速度，根据在同等条件下的测试，Presto内核执行同等Javascrīpt所需的时间仅有Trident和Gecko内核的约1/3（Trident内核最慢，不过两者相差没有多大），本文的其中一个修改者认为上述测试信息过于老旧且不完整，因为他曾做过的小测试显示Presto部分快部分慢，各内核总体相当。那次测试的时候因为Apple机的硬件条件和普通PC机不同所以没有测试WebCore内核。只可惜Presto是商业引擎，使用Presto的除开Opera以外，只剩下NDSBrowser、Wii Internet Channle、Nokia 770网络浏览器等，这很大程度上限制了Presto的发展。</p><p>Opera现已改用Google Chrome的Blink内核。</p><h3 id="Gecko"><a href="#Gecko" class="headerlink" title="Gecko"></a>Gecko</h3><p>Gecko(Firefox内核)：Netscape6开始采用的内核，后来的Mozilla FireFox(火狐浏览器) 也采用了该内核，Gecko的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个开源内核，因此受到许多人的青睐，Gecko内核的浏览器也很多，这也是Gecko内核虽然年轻但市场占有率能够迅速提高的重要原因。</p><p>事实上，Gecko引擎的由来跟IE不无关系，前面说过IE没有使用W3C的标准，这导致了微软内部一些开发人员的不满；他们与当时已经停止更新了的 Netscape的一些员工一起创办了Mozilla，以当时的Mosaic内核为基础重新编写内核，于是开发出了Gecko。不过事实上，Gecko 内核的浏览器仍然还是Firefox (火狐) 用户最多，所以有时也会被称为Firefox内核。此外Gecko也是一个跨平台内核，可以在Windows、 BSD、Linux和Mac OS X中使用。</p><p>Gecko内核常见的浏览器：[1]  Mozilla Firefox、Mozilla SeaMonkey、waterfox（Firefox的64位开源版）、Iceweasel、Epiphany（早期版本）、Flock（早期版本）、K-Meleon</p><h3 id="Webkit"><a href="#Webkit" class="headerlink" title="Webkit"></a>Webkit</h3><p>Webkit(Safari内核,Chrome内核原型,开源):它是苹果公司自己的内核，也是苹果的Safari浏览器使用的内核。 Webkit引擎包含WebCore排版引擎及JavaScriptCore解析引擎，均是从KDE的KHTML及KJS引擎衍生而来，它们都是自由软件，在GPL条约下授权，同时支持BSD系统的开发。所以Webkit也是自由软件，同时开放源代码。在安全方面不受IE、Firefox的制约，所以Safari浏览器在国内还是很安全的。</p><p>限于Mac OS X的使用不广泛和Safari浏览器曾经只是Mac OS X的专属浏览器，这个内核本身应该说市场范围并不大；但似乎根据最新的浏览器调查表明，该浏览器的市场甚至已经超过了Opera的Presto了——当然这一方面得益于苹果转到x86架构之后的人气暴涨，另外也是因为Safari 3终于推出了Windows版的缘故吧。Mac下还有OmniWeb、Shiira等人气很高的浏览器。</p><p>Google Chrome、360极速浏览器以及搜狗高速浏览器高速模式也使用Webkit作为内核(在脚本理解方面，Chrome使用自己研发的V8引擎)。WebKit 内核在手机上的应用也十分广泛，例如 Google 的手机 Gphone、 Apple 的iPhone， Nokia’s Series 60 browser 等所使用的 Browser 内核引擎，都是基于 WebKit。</p><p>WebKit内核常见的浏览器：傲游浏览器3、Apple Safari (Win/Mac/iPhone/iPad)、Symbian手机浏览器、Android 默认浏览器</p><h3 id="Blink"><a href="#Blink" class="headerlink" title="Blink"></a>Blink</h3><p>Blink是一个由Google和Opera Software开发的浏览器排版引擎，Google计划将这个渲染引擎作为Chromium计划的一部分，并且在2013年4月的时候公布了这一消息。这一渲染引擎是开源引擎WebKit中WebCore组件的一个分支，并且在Chrome（28及往后版本）、Opera（15及往后版本）和Yandex浏览器中使用。</p><p>2013年4月3日，谷歌在Chromium Blog上发表博客[3]  ，称将与苹果的开源浏览器核心Webkit分道扬镳，在Chromium项目中研发Blink渲染引擎（即浏览器核心），内置于Chrome浏览器之中。</p><p>苹果在Safari中采用Webkit核心，并于2005年将Webkit公开为开源软件。谷歌当时采用苹果的Webkit核心打造了Chrome浏览器。Opera也宣布称将会转向Webkit核心，但是谷歌宣布此举后，Opera表示将会跟随谷歌采用其Blink浏览器核心，同时参与了Blink的开发。</p><p>谷歌转向研发Blink浏览器内核意义重大，谷歌此举欲降低Webkit即苹果在浏览器市场的影响力。截止2012年底，Webkit浏览器内核占总浏览器市场份额约40%。谷歌解释称，Chromium多处理架构系统与其他Webkit浏览器很不相同。谷歌工程师Adam Barth在博客[3]  中表示，随着浏览器的发展，苹果的Webkit已经不能满足用户需求，同时也有碍浏览器技术的创新步伐。但是他也表示，谷歌自主研发Blink内核绝非易事，但是新内核将会提升整个开源网络生态系统的机能。谷歌做出此举之际，Mozilla与三星也达成合作协议开发“下一代”浏览器渲染引擎Servo。</p><h2 id="JS引擎"><a href="#JS引擎" class="headerlink" title="JS引擎"></a>JS引擎</h2><p>js引擎比较多也比较杂，所以以公司为单位做整理。</p><p> 第一款JavaScript引擎由布兰登·艾克在网景公司开发，用于Netscape Navigator网页浏览器中。引擎的名字叫做SpiderMonkey，由C实现。它自JavaScript 1.5升级以符合ECMA-262 版本3。Rhino引擎，由网景公司的Norris Boyd开发，由Java实现。像SpiderMonkey一样，Rhino符合ECMA-262 版本3。JavaScript引擎的应用例子还包括： Apple Safari 4的Nitro，Google Chrome的V8和 Mozilla Firefox 3.5的TraceMonkey。</p><h3 id="Mozilla"><a href="#Mozilla" class="headerlink" title="Mozilla"></a>Mozilla</h3><p> SpiderMonkey，第一款JavaScript引擎，由Brendan Eich在Netscape Communications时编写，用于Mozilla Firefox 1.0～3.0版本。</p><p>Rhino，由Mozilla基金会管理，开放源代码，完全以Java编写。</p><p>TraceMonkey，基于实时编译的引擎，其中部份代码取自Tamarin引擎，用于Mozilla Firefox 3.5～3.6版本。</p><p>JaegerMonkey，德文Jäger原意为猎人，结合追踪和组合码技术大幅提高性能，部分技术借凿了V8、JavaScriptCore、WebKit，用于Mozilla Firefox 4.0以上版本。</p><p>IonMonkey，可以对JavaScript编译后的结果进行优化，用于Mozilla Firefox 18.0以上版本。</p><p>OdinMonkey，可以对asm.js进行优化，用于Mozilla Firefox 22.0以上版本。</p><h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><p>V8，开放源代码，由Google丹麦开发，是Google Chrome的一部分。同时node.js也是使用V8引擎。</p><h3 id="微软"><a href="#微软" class="headerlink" title="微软"></a>微软</h3><p>Chakra (JScript引擎)，中文译名为查克拉，用于Internet Explorer 9的32位版本[1]及Internet Explorer 10。</p><p>Opera</p><p>Linear A，用于Opera 4.0～6.1版本。</p><p>Linear B，用于Opera 7.0～9.2版本。</p><p>Futhark，用于Opera 9.5～10.2版本。</p><p>Carakan，由Opera软件公司编写，自Opera10.50版本开始使用。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>KJS，KDE的ECMAScript/JavaScript引擎，最初由Harri Porten开发，用于KDE项目的Konqueror网页浏览器中。</p><p>Narcissus，开放源代码，由Brendan Eich编写（他也参与编写了第一个SpiderMonkey）。</p><p>Tamarin，由Adobe Labs编写，Flash Player 9所使用的引擎。</p><p>Nitro（原名SquirrelFish），为Safari 4编写。</p><h2 id="当前主流浏览器的渲染引擎和JS引擎"><a href="#当前主流浏览器的渲染引擎和JS引擎" class="headerlink" title="当前主流浏览器的渲染引擎和JS引擎"></a>当前主流浏览器的渲染引擎和JS引擎</h2><p>当前指的是2017年1月各个浏览器的最新版本。</p><h4 id="IE"><a href="#IE" class="headerlink" title="IE"></a>IE</h4><p>渲染引擎：Trident，JS引擎：Chakra。</p><h4 id="edge"><a href="#edge" class="headerlink" title="edge"></a>edge</h4><p>渲染引擎：edge，JS引擎：Chakra。</p><h4 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h4><p>渲染引擎：gecko，JS引擎：monkey系列。</p><h4 id="safari"><a href="#safari" class="headerlink" title="safari"></a>safari</h4><p>渲染引擎：webkit，JS引擎：SquirrelFish系列。</p><h4 id="Opera"><a href="#Opera" class="headerlink" title="Opera"></a>Opera</h4><p>渲染引擎：Blink，JS引擎：Carakan。</p><h4 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h4><p>渲染引擎：Blink，JS引擎：V8。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个前端程序员，浏览器是我们每天都要打交道的对象。众所周知，现在市面上有非常多的浏览器产品，而它们的内核也不尽相同，那么到底有那些浏览器内核，而不同的浏览器又使用了什么内核呢？今天我们就来捋一捋。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="浏览器" scheme="https://rusyue.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="内核" scheme="https://rusyue.com/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="Firefox" scheme="https://rusyue.com/tags/Firefox/"/>
    
      <category term="Chrome" scheme="https://rusyue.com/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态码</title>
    <link href="https://rusyue.com/2017/04/16/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>https://rusyue.com/2017/04/16/HTTP状态码/</id>
    <published>2017-04-16T15:42:36.000Z</published>
    <updated>2018-02-19T14:53:28.737Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP状态码的分类以及它们的含义。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义。</p><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。</p><a id="more"></a><h2 id="具体分类"><a href="#具体分类" class="headerlink" title="具体分类"></a>具体分类</h2><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应。</p><h4 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h4><p>客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</p><h4 id="101-Switching-Protocols"><a href="#101-Switching-Protocols" class="headerlink" title="101 Switching Protocols"></a>101 Switching Protocols</h4><p>服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。</p><h4 id="102-Processing"><a href="#102-Processing" class="headerlink" title="102 Processing"></a>102 Processing</h4><p>由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</p><h3 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h3><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受 。</p><h4 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h4><p>请求已成功，请求所希望的响应头或数据体将随此响应返回。出现此状态码是表示正常状态。</p><h4 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h4><p>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。</p><h4 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h4><p>服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。</p><h4 id="203-Non-Authoritative-Information"><a href="#203-Non-Authoritative-Information" class="headerlink" title="203 Non-Authoritative Information"></a>203 Non-Authoritative Information</h4><p>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</p><h4 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h4><p>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。</p><p>如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。</p><p>由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</p><h4 id="205-Reset-Content"><a href="#205-Reset-Content" class="headerlink" title="205 Reset Content"></a>205 Reset Content</h4><p>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。</p><p>与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</p><h4 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h4><p>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p><p>该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。</p><h4 id="207-Multi-Status"><a href="#207-Multi-Status" class="headerlink" title="207 Multi-Status"></a>207 Multi-Status</h4><p>由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。</p><p>当且仅当后续的请求所使用的方法是 GET 或者 HEAD 时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A-&gt;A，或者A-&gt;B-&gt;C-&gt;A），因为这会导致服务器和客户端大量不必要的资源消耗。按照 HTTP/1.0 版规范的建议，浏览器不应自动访问超过5次的重定向。</p><h4 id="300-Multiple-Choices"><a href="#300-Multiple-Choices" class="headerlink" title="300 Multiple Choices"></a>300 Multiple Choices</h4><p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</p><h4 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h4><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p><h4 id="302-Move-temporarily"><a href="#302-Move-temporarily" class="headerlink" title="302 Move temporarily"></a>302 Move temporarily</h4><p>请求的资源临时从不同的 URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p><h4 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h4><p>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。</p><h4 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h4><p>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</p><h4 id="305-Use-Proxy"><a href="#305-Use-Proxy" class="headerlink" title="305 Use Proxy"></a>305 Use Proxy</h4><p>被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。</p><h4 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h4><p>请求的资源临时从不同的URI 响应请求。</p><p>新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。</p><p>如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p><h3 id="请求错误"><a href="#请求错误" class="headerlink" title="请求错误"></a>请求错误</h3><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个 HEAD 请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p><p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p><h4 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h4><p>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。</p><p>2、请求参数有误。</p><h4 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h4><p>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p><h4 id="402-Payment-Required"><a href="#402-Payment-Required" class="headerlink" title="402 Payment Required"></a>402 Payment Required</h4><p>该状态码是为了将来可能的需求而预留的。</p><h4 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h4><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p><h4 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h4><p>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。出现这个错误的最有可能的原因是服务器端没有这个页面。</p><h4 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h4><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。</p><p>鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p><h4 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h4><p>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。</p><p>除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p><h4 id="407-Proxy-Authentication-Required"><a href="#407-Proxy-Authentication-Required" class="headerlink" title="407 Proxy Authentication Required"></a>407 Proxy Authentication Required</h4><p>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。</p><h4 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h4><p>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</p><h4 id="409-Conflict"><a href="#409-Conflict" class="headerlink" title="409 Conflict"></a>409 Conflict</h4><p>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。</p><p>冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</p><h4 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h4><p>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。</p><p>410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</p><h4 id="411-Length-Required"><a href="#411-Length-Required" class="headerlink" title="411 Length Required"></a>411 Length Required</h4><p>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</p><h4 id="412-Precondition-Failed"><a href="#412-Precondition-Failed" class="headerlink" title="412 Precondition Failed"></a>412 Precondition Failed</h4><p>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p><h4 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h4><p>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p><p>如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</p><h4 id="414-Request-URI-Too-Long"><a href="#414-Request-URI-Too-Long" class="headerlink" title="414 Request-URI Too Long"></a>414 Request-URI Too Long</h4><p>请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：</p><p>本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。</p><p>重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。</p><p>客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。</p><h4 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h4><p>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</p><h4 id="416-Requested-Range-Not-Satisfiable"><a href="#416-Requested-Range-Not-Satisfiable" class="headerlink" title="416 Requested Range Not Satisfiable"></a>416 Requested Range Not Satisfiable</h4><p>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。</p><p>假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其 Content-Type。</p><h4 id="417-Expectation-Failed"><a href="#417-Expectation-Failed" class="headerlink" title="417 Expectation Failed"></a>417 Expectation Failed</h4><p>在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。</p><h4 id="421-too-many-connections"><a href="#421-too-many-connections" class="headerlink" title="421 too many connections"></a>421 too many connections</h4><p>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</p><h4 id="422-Unprocessable-Entity"><a href="#422-Unprocessable-Entity" class="headerlink" title="422 Unprocessable Entity"></a>422 Unprocessable Entity</h4><p>请求格式正确，但是由于含有语义错误，无法响应。</p><h4 id="423-Locked"><a href="#423-Locked" class="headerlink" title="423 Locked"></a>423 Locked</h4><p>当前资源被锁定。</p><h4 id="424-Failed-Dependency"><a href="#424-Failed-Dependency" class="headerlink" title="424 Failed Dependency"></a>424 Failed Dependency</h4><p>由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。</p><h4 id="425-Unordered-Collection"><a href="#425-Unordered-Collection" class="headerlink" title="425 Unordered Collection"></a>425 Unordered Collection</h4><p>在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。</p><h4 id="426-Upgrade-Required"><a href="#426-Upgrade-Required" class="headerlink" title="426 Upgrade Required"></a>426 Upgrade Required</h4><p>客户端应当切换到TLS/1.0。（RFC 2817）</p><h4 id="449-Retry-With"><a href="#449-Retry-With" class="headerlink" title="449 Retry With"></a>449 Retry With</h4><p>由微软扩展，代表请求应当在执行完适当的操作后进行重试。</p><h4 id="451-Unavailable-For-Legal-Reasons"><a href="#451-Unavailable-For-Legal-Reasons" class="headerlink" title="451 Unavailable For Legal Reasons"></a>451 Unavailable For Legal Reasons</h4><p>该请求因法律原因不可用。（RFC 7725）</p><h3 id="服务器错误"><a href="#服务器错误" class="headerlink" title="服务器错误"></a>服务器错误</h3><p>这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD 请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。</p><p>这些状态码适用于任何响应方法。</p><h4 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h4><p>服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。</p><h4 id="501-Not-Implemented"><a href="#501-Not-Implemented" class="headerlink" title="501 Not Implemented"></a>501 Not Implemented</h4><p>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</p><h4 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h4><p>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p><h4 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h4><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。</p><h4 id="504-Gateway-Timeout"><a href="#504-Gateway-Timeout" class="headerlink" title="504 Gateway Timeout"></a>504 Gateway Timeout</h4><p>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p><h4 id="505-HTTP-Version-Not-Supported"><a href="#505-HTTP-Version-Not-Supported" class="headerlink" title="505 HTTP Version Not Supported"></a>505 HTTP Version Not Supported</h4><p>服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p><h4 id="506-Variant-Also-Negotiates"><a href="#506-Variant-Also-Negotiates" class="headerlink" title="506 Variant Also Negotiates"></a>506 Variant Also Negotiates</h4><p>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p><h4 id="507-Insufficient-Storage"><a href="#507-Insufficient-Storage" class="headerlink" title="507 Insufficient Storage"></a>507 Insufficient Storage</h4><p>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p><h4 id="509-Bandwidth-Limit-Exceeded"><a href="#509-Bandwidth-Limit-Exceeded" class="headerlink" title="509 Bandwidth Limit Exceeded"></a>509 Bandwidth Limit Exceeded</h4><p>服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</p><h4 id="510-Not-Extended"><a href="#510-Not-Extended" class="headerlink" title="510 Not Extended"></a>510 Not Extended</h4><p>获取资源所需要的策略并没有被满足。</p><h4 id="600-Unparseable-Response-Headers"><a href="#600-Unparseable-Response-Headers" class="headerlink" title="600 Unparseable Response Headers"></a>600 Unparseable Response Headers</h4><p>源站没有返回响应头部，只返回实体内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP状态码的分类以及它们的含义。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义。&lt;/p&gt;
&lt;p&gt;当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。&lt;/p&gt;
&lt;p&gt;HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTTP" scheme="https://rusyue.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JS内存泄漏的原因及识别</title>
    <link href="https://rusyue.com/2017/04/11/JS%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%AF%86%E5%88%AB/"/>
    <id>https://rusyue.com/2017/04/11/JS内存泄漏的原因及识别/</id>
    <published>2017-04-11T06:42:04.000Z</published>
    <updated>2018-02-19T15:01:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>程序的运行需要内存，只要程序提出要求，操作系统运行时就必须要分配内存。对于持续运行的进程，必须及时释放没用的内存，否则内存占用越来越高，影响系统运行或者直接奔溃。</p><p><strong>对于没有再用到的内存，没有及时释放，就叫做内存泄漏</strong>。</p><p>内存泄漏是每个开发者最终都要面对的问题，它是许多问题的根源：反应迟缓，崩溃，高延迟，以及其他应用问题。</p><a id="more"></a><h2 id="什么是垃圾回收"><a href="#什么是垃圾回收" class="headerlink" title="什么是垃圾回收"></a>什么是垃圾回收</h2><p>内存可以手动清理，但是很多语言都提供内存自动管理，简化管理内存的代码，这就被称为 <strong>垃圾回收机制</strong>。</p><h3 id="垃圾回收机制如何得知已不再需要的内存？"><a href="#垃圾回收机制如何得知已不再需要的内存？" class="headerlink" title="垃圾回收机制如何得知已不再需要的内存？"></a>垃圾回收机制如何得知已不再需要的内存？</h3><blockquote><p><strong>引用计数法:</strong></p></blockquote><p>这是一种最常用的方法。语言引擎有一张“引用表”，保存了内存中所有的值的引用次数，当某个值的引用次数为0，就表示这个值已经没有被用到，可以被释放了。</p><h3 id="V8-垃圾回收机制"><a href="#V8-垃圾回收机制" class="headerlink" title="V8 垃圾回收机制"></a>V8 垃圾回收机制</h3><p>自动垃圾回收算法的演变过程中出现了很多算法，但是由于不同对象的生存周期不同，没有一种算法适用于所有的情况。所以V8采用了一种分代回收的策 略，将内存分为两个生代：新生代和老生代。新生代的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象。分别对新生代和老生代使用 不同的垃圾回收算法来提升垃圾回收的效率。对象起初都会被分配到新生代，当新生代中的对象满足某些条件（后面会有介绍）时，会被移动到老生代（晋升）。</p><h2 id="导致内存泄露的情况及处理"><a href="#导致内存泄露的情况及处理" class="headerlink" title="导致内存泄露的情况及处理"></a>导致内存泄露的情况及处理</h2><h3 id="情境一-某个值没有被用到，但是引用次数不为0"><a href="#情境一-某个值没有被用到，但是引用次数不为0" class="headerlink" title="情境一: 某个值没有被用到，但是引用次数不为0"></a>情境一: 某个值没有被用到，但是引用次数不为0</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i am dingding'</span>)</span><br></pre></td></tr></table></figure><p>尽管<code>arr</code>这个变量没有被用到，但是arr的引用次数为1，所以依然会占用内存，如何解除？</p><p>阮大大举了这么一个🌰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i am dingding'</span>)</span><br><span class="line">arr = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p><code>arr</code> 被重置，解除了对[1,2]的引用，引用次数就变成了0，内存就可以被释放了。因此，并不是说有了垃圾回收机制，我们就轻松了。你还是需要关注内存占用，对那些很占空间的值，一旦不再用到，你就需要检查是否还存在对它们的引用。如果是的话，就必须手动解除引用。</p><p><strong>以上的伪代码，实际情况中，出现的可能性很小很小，为什么？</strong><br>不仅是阮大大举过这个例子，在<a href="">《JavaScript高级程序设计》</a>中有一个章节也出现过，但是对于前端小菜鸟来说，其实这个栗子实为不妥，原因：</p><ol><li>all = null ？虽然理论上来说，可行，但是实际编程中不应该是通过这种操作手动清除，一般的编程规范也不会允许你这么去写。去坑的这几年，这种代码我是一行都没写过，因为我不知道要清除内存。。。</li><li>arr 是个全局变量？什么情况下我们真的需要定义一个变量在全局作用域下？往往是编程习惯的不妥</li><li>一般内存泄漏的情况，大多是在闭包中，函数执行完，但是内部变量依然留在内存中，这就造成了内存泄漏！</li></ol><h3 id="情境二-意外的全局变量"><a href="#情境二-意外的全局变量" class="headerlink" title="情境二: 意外的全局变量"></a>情境二: 意外的全局变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  bar = <span class="string">"this is a hidden global variable"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bar = <span class="string">"potential accident global"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun () <span class="comment">// this 指向window 意外创建了一个全局变量</span></span><br></pre></td></tr></table></figure><blockquote><p>处理: js文件头部添加<code>&#39;use strict&#39;</code> 开启严格模式解析js，避免创建意外的全局变量</p></blockquote><h3 id="情境三-脱离DOM的引用"><a href="#情境三-脱离DOM的引用" class="headerlink" title="情境三: 脱离DOM的引用"></a>情境三: 脱离DOM的引用</h3><blockquote><p>placeholder</p></blockquote><h3 id="情境四-闭包会引起内存泄漏么"><a href="#情境四-闭包会引起内存泄漏么" class="headerlink" title="情境四: 闭包会引起内存泄漏么"></a>情境四: 闭包会引起内存泄漏么</h3><blockquote><p>placeholder</p></blockquote><h2 id="内存泄露的识别方法"><a href="#内存泄露的识别方法" class="headerlink" title="内存泄露的识别方法"></a>内存泄露的识别方法</h2><h3 id="chrome-浏览器"><a href="#chrome-浏览器" class="headerlink" title="chrome 浏览器"></a>chrome 浏览器</h3>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>打开控制台</span><br><span class="line"><span class="bullet">2. </span>点击Memory</span><br><span class="line"><span class="bullet">3. </span>勾选Record allocation timeline</span><br></pre></td></tr></table></figure><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>   ​</p><h2 id="避免内存泄漏的方法"><a href="#避免内存泄漏的方法" class="headerlink" title="避免内存泄漏的方法"></a>避免内存泄漏的方法</h2><p>大量引用类型的变量，都需要手动清除，是十分麻烦的，那么有咩有一种引用申明可以让垃圾回收机制不考虑该对象的引用，当其他对象都不再引用该对象，垃圾回收就可自动回收了，所以主要清楚主要的引用就方便很多了。</p><p><strong>有的！</strong></p><p>ES6考虑到了这点，推出两种新的数据结构 weakSet WeakMap,它们的对于值的引用就是不计入垃圾回收机制</p><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><ol><li><p>WeakSet 是一个构造函数 通过new 创建</p></li><li><p>成员类型只允许是 =&gt; 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>(a);</span><br><span class="line"><span class="comment">// WeakSet&#123;[1, 2], [3, 4]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>(b);</span><br><span class="line"><span class="comment">// Uncaught TypeError: Invalid value used in weak set(…)</span></span><br></pre></td></tr></table></figure><p>数组b的成员不为对象，所以报错</p></li><li><p>weakSet 方法</p><ul><li><strong>WeakSet.prototype.add(value)</strong>：向 WeakSet 实例添加一个新成员。</li><li><strong>WeakSet.prototype.delete(value)</strong>：清除 WeakSet 实例的指定成员。</li><li><strong>WeakSet.prototype.has(value)</strong>：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。</li></ul></li></ol><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>类似WeakSet(感觉实际用处并不大，我真的懒得写了 : )</p><hr><blockquote><p>参考资料:<br><a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html?utm_source=tuicool&amp;utm_medium=referral/*&amp;^%$" target="_blank" rel="noopener">JavaScript 内存泄漏教程</a><br><a href="https://jinlong.github.io/2016/05/01/4-Types-of-Memory-Leaks-in-JavaScript-and-How-to-Get-Rid-Of-Them/" target="_blank" rel="noopener">4类 JavaScript 内存泄漏及如何避免 </a></p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;程序的运行需要内存，只要程序提出要求，操作系统运行时就必须要分配内存。对于持续运行的进程，必须及时释放没用的内存，否则内存占用越来越高，影响系统运行或者直接奔溃。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于没有再用到的内存，没有及时释放，就叫做内存泄漏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;内存泄漏是每个开发者最终都要面对的问题，它是许多问题的根源：反应迟缓，崩溃，高延迟，以及其他应用问题。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://rusyue.com/tags/JavaScript/"/>
    
      <category term="内存泄漏" scheme="https://rusyue.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
      <category term="垃圾回收" scheme="https://rusyue.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>原生JS使用sort方法实现对象数组排序</title>
    <link href="https://rusyue.com/2017/04/03/%E5%8E%9F%E7%94%9FJS%E4%BD%BF%E7%94%A8sort%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/"/>
    <id>https://rusyue.com/2017/04/03/原生JS使用sort方法实现对象数组排序/</id>
    <published>2017-04-03T12:05:57.000Z</published>
    <updated>2017-04-03T15:22:34.356Z</updated>
    
    <content type="html"><![CDATA[<p>sort 方法接受一个特殊的比较函数作为参数，这个比较函数又有 a, b 两个参数，这两个参数其实就是数组里每一个元素，每次会抽出两个元素进行比较，同时根据比较函数的返回值对这两个元素进行排序，排序有三种情况：</p><ul><li>返回值 = 0时，a, b 位置不变</li><li>返回值 &lt; 0时，a 排在 b 前面</li><li>返回值 &gt; 0时，b 排在 a 前面</li></ul><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用sort实现对象数组排序</span></span><br><span class="line"><span class="comment"> * 调用: employees.sort( by(param) )</span></span><br><span class="line"><span class="comment"> * 函数by: 根据param对对象中对应的键值进行比较，按sort方法的规则返回正负数</span></span><br><span class="line"><span class="comment"> * by调用: by( param1, by(param2) ), param1比较结果相同时按param2进行比较</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> employees=[];</span><br><span class="line">employees[<span class="number">0</span>]=&#123;<span class="attr">name</span>:<span class="string">"George"</span>, <span class="attr">age</span>:<span class="number">32</span>, <span class="attr">retiredate</span>:<span class="string">"March 12, 2014"</span>&#125;;</span><br><span class="line">employees[<span class="number">1</span>]=&#123;<span class="attr">name</span>:<span class="string">"Edward"</span>, <span class="attr">age</span>:<span class="number">17</span>, <span class="attr">retiredate</span>:<span class="string">"June 2, 2023"</span>&#125;;</span><br><span class="line">employees[<span class="number">4</span>]=&#123;<span class="attr">name</span>:<span class="string">"Adward"</span>, <span class="attr">age</span>:<span class="number">17</span>, <span class="attr">retiredate</span>:<span class="string">"June 2, 2023"</span>&#125;;</span><br><span class="line">employees[<span class="number">2</span>]=&#123;<span class="attr">name</span>:<span class="string">"Christine"</span>, <span class="attr">age</span>:<span class="number">58</span>, <span class="attr">retiredate</span>:<span class="string">"December 20, 2036"</span>&#125;;</span><br><span class="line">employees[<span class="number">3</span>]=&#123;<span class="attr">name</span>:<span class="string">"Sarah"</span>, <span class="attr">age</span>:<span class="number">62</span>, <span class="attr">retiredate</span>:<span class="string">"April 30, 2020"</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> by = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">o,p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a,b;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> o === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> p === <span class="string">'object'</span> &amp;&amp; o &amp;&amp; p) &#123;</span><br><span class="line">      a = o[key];</span><br><span class="line">      b = p[key];</span><br><span class="line">      <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> fn === <span class="string">'function'</span> ? fn(o,p) : <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="keyword">typeof</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> a &lt; <span class="keyword">typeof</span> b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">employees.sort(by(<span class="string">'age'</span>,by(<span class="string">'name'</span>)));</span><br><span class="line"><span class="built_in">console</span>.log(employees);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用sort实现对象数组排序</span></span><br><span class="line"><span class="comment"> * 调用: employees.sort( by(param) )</span></span><br><span class="line"><span class="comment"> * 函数by: 根据param对对象中对应的键值进行比较，按sort方法的规则返回正负数</span></span><br><span class="line"><span class="comment"> * by调用: by( param1, by(param2) ), param1比较结果相同时按param2进行比较</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> employees=[];</span><br><span class="line">employees[<span class="number">0</span>]=&#123;<span class="attr">name</span>:<span class="string">"George"</span>, <span class="attr">age</span>:<span class="number">32</span>, <span class="attr">retiredate</span>:<span class="string">"March 12, 2014"</span>&#125;;</span><br><span class="line">employees[<span class="number">1</span>]=&#123;<span class="attr">name</span>:<span class="string">"Edward"</span>, <span class="attr">age</span>:<span class="number">17</span>, <span class="attr">retiredate</span>:<span class="string">"June 2, 2023"</span>&#125;;</span><br><span class="line">employees[<span class="number">4</span>]=&#123;<span class="attr">name</span>:<span class="string">"Adward"</span>, <span class="attr">age</span>:<span class="number">17</span>, <span class="attr">retiredate</span>:<span class="string">"June 2, 2023"</span>&#125;;</span><br><span class="line">employees[<span class="number">2</span>]=&#123;<span class="attr">name</span>:<span class="string">"Christine"</span>, <span class="attr">age</span>:<span class="number">58</span>, <span class="attr">retiredate</span>:<span class="string">"December 20, 2036"</span>&#125;;</span><br><span class="line">employees[<span class="number">3</span>]=&#123;<span class="attr">name</span>:<span class="string">"Sarah"</span>, <span class="attr">age</span>:<span class="number">62</span>, <span class="attr">retiredate</span>:<span class="string">"April 30, 2020"</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> by = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">o,p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a,b;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> o === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> p === <span class="string">'object'</span> &amp;&amp; o &amp;&amp; p) &#123;</span><br><span class="line">      a = o[key];</span><br><span class="line">      b = p[key];</span><br><span class="line">      <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> fn === <span class="string">'function'</span> ? fn(o,p) : <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="keyword">typeof</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> a &lt; <span class="keyword">typeof</span> b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">employees.sort(by(<span class="string">'age'</span>,by(<span class="string">'name'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(employees);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">[ &#123; name: 'Adward', age: 17, retiredate: 'June 2, 2023' &#125;,</span></span><br><span class="line"><span class="comment">  &#123; name: 'Edward', age: 17, retiredate: 'June 2, 2023' &#125;,</span></span><br><span class="line"><span class="comment">  &#123; name: 'George', age: 32, retiredate: 'March 12, 2014' &#125;,</span></span><br><span class="line"><span class="comment">  &#123; name: 'Christine', age: 58, retiredate: 'December 20, 2036' &#125;,</span></span><br><span class="line"><span class="comment">  &#123; name: 'Sarah', age: 62, retiredate: 'April 30, 2020' &#125; ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sort 方法接受一个特殊的比较函数作为参数，这个比较函数又有 a, b 两个参数，这两个参数其实就是数组里每一个元素，每次会抽出两个元素进行比较，同时根据比较函数的返回值对这两个元素进行排序，排序有三种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回值 = 0时，a, b 位置不变&lt;/li&gt;
&lt;li&gt;返回值 &amp;lt; 0时，a 排在 b 前面&lt;/li&gt;
&lt;li&gt;返回值 &amp;gt; 0时，b 排在 a 前面&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="随笔" scheme="https://rusyue.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="前端" scheme="https://rusyue.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://rusyue.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记-Set和Map</title>
    <link href="https://rusyue.com/2017/04/01/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Set%E5%92%8CMap/"/>
    <id>https://rusyue.com/2017/04/01/ES6学习笔记-Set和Map/</id>
    <published>2017-04-01T04:24:39.000Z</published>
    <updated>2018-02-19T14:43:21.976Z</updated>
    
    <content type="html"><![CDATA[<p>大家知道，在ES5中，我们拥有两种数据数据结构，Array和Object。但是它们的功能还不够全面。于是在ES6中又为我们提供了两个新的数据结构，Set和Map。</p><a id="more"></a><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set 本身是一个构造函数，用来生成 Set 数据结构。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>].forEach(<span class="function"><span class="params">x</span> =&gt;</span> s.add(x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 5 4</span></span><br></pre></td></tr></table></figure></p><p>上面代码通过<code>add</code>方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。</p><p>Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...set]</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line">items.size <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例三</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divs</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...document.querySelectorAll(<span class="string">'div'</span>)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(divs());</span><br><span class="line">set.size <span class="comment">// 56</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似于</span></span><br><span class="line">divs().forEach(<span class="function"><span class="params">div</span> =&gt;</span> set.add(div));</span><br><span class="line">set.size <span class="comment">// 56</span></span><br></pre></td></tr></table></figure><p>上面代码中，也展示了一种去除数组重复成员的方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去除数组的重复成员</span></span><br><span class="line">[...new <span class="built_in">Set</span>(array)]</span><br></pre></td></tr></table></figure></p><p>向 Set 加入值的时候，不会发生类型转换，所以<code>5</code>和<code>&quot;5&quot;</code>是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value equality”，它类似于精确相等运算符（<code>===</code>），主要的区别是<code>NaN</code>等于自身，而精确相等运算符认为<code>NaN</code>不等于自身。</p><p>要注意的是，两个对象总是被认为是不相等的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">set.add(&#123;&#125;);</span><br><span class="line">set.size <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">set.add(&#123;&#125;);</span><br><span class="line">set.size <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>上面代码表示，由于两个空对象不相等，所以它们被视为两个值。</p><h4 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h4><p>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。</p><p>首先，WeakSet 的成员只能是对象，而不能是其他类型的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line">ws.add(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used in weak set</span></span><br><span class="line">ws.add(<span class="built_in">Symbol</span>())</span><br><span class="line"><span class="comment">// TypeError: invalid value used in weak set</span></span><br></pre></td></tr></table></figure></p><p>其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p><p>为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">p</span>: <span class="string">'Hello World'</span>&#125;;</span><br><span class="line"></span><br><span class="line">m.set(o, <span class="string">'content'</span>)</span><br><span class="line">m.get(o) <span class="comment">// "content"</span></span><br><span class="line"></span><br><span class="line">m.has(o) <span class="comment">// true</span></span><br><span class="line">m.delete(o) <span class="comment">// true</span></span><br><span class="line">m.has(o) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面的例子展示了如何向 Map 添加成员。作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'张三'</span>],</span><br><span class="line">  [<span class="string">'title'</span>, <span class="string">'Author'</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">map.size <span class="comment">// 2</span></span><br><span class="line">map.has(<span class="string">'name'</span>) <span class="comment">// true</span></span><br><span class="line">map.get(<span class="string">'name'</span>) <span class="comment">// "张三"</span></span><br><span class="line">map.has(<span class="string">'title'</span>) <span class="comment">// true</span></span><br><span class="line">map.get(<span class="string">'title'</span>) <span class="comment">// "Author"</span></span><br></pre></td></tr></table></figure><p>事实上，不仅仅是数组，任何具有<code>Iterator</code>接口、且每个成员都是一个双元素的数组的数据结构都可以当作Map构造函数的参数。这就是说，Set和Map都可以用来生成新的 Map。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([</span><br><span class="line">  [<span class="string">'foo'</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">'bar'</span>, <span class="number">2</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>(set);</span><br><span class="line">m1.get(<span class="string">'foo'</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'baz'</span>, <span class="number">3</span>]]);</span><br><span class="line"><span class="keyword">const</span> m3 = <span class="keyword">new</span> <span class="built_in">Map</span>(m2);</span><br><span class="line">m3.get(<span class="string">'baz'</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h4><p><code>WeakMap</code>与<code>Map</code>的区别有两点。</p><p>首先，WeakMap只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: 1 is not an object!</span></span><br><span class="line">map.set(<span class="built_in">Symbol</span>(), <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br><span class="line">map.set(<span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br></pre></td></tr></table></figure></p><p>上面代码中，如果将数值<code>1</code>和<code>Symbol</code>值作为<code>WeakMap</code>的键名，都会报错。</p><p>其次，<code>WeakMap</code>的键名所指向的对象，不计入垃圾回收机制。</p><p>基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。一个典型应用场景是，在网页的 DOM 元素上添加数据，就可以使用<code>WeakMap</code>结构。当该 DOM 元素被清除，其所对应的<code>WeakMap</code>记录就会自动被移除。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家知道，在ES5中，我们拥有两种数据数据结构，Array和Object。但是它们的功能还不够全面。于是在ES6中又为我们提供了两个新的数据结构，Set和Map。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://rusyue.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://rusyue.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记-箭头函数</title>
    <link href="https://rusyue.com/2017/03/03/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>https://rusyue.com/2017/03/03/ES6学习笔记-箭头函数/</id>
    <published>2017-03-03T14:21:35.000Z</published>
    <updated>2018-02-19T14:42:31.088Z</updated>
    
    <content type="html"><![CDATA[<p>箭头函数是ES6中一个新增的特性，今天我们就来看看它是如何使用的。</p><a id="more"></a><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>ES6 允许使用“箭头”（=&gt;）定义函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br></pre></td></tr></table></figure></p><p>等同于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我们可以看到箭头前面的 v 是作为函数的参数，箭头后面的 v 是作为函数的返回值，那么箭头函数的结构差不多就明了了。</p><p>如果你不需要参数，或需要多个参数，就使用一个圆括号在参数部分，也就是箭头的前面：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>通过之前的例子我们可以知道，箭头后面的内容就是函数要返回的内容，但这仅限于函数体用一句语句就可以解决的情况，如果函数体拥有一句以上的语句，你需要将函数体中的语句用大括号括起来，并仍然需要使用<code>return</code>语句将返回值返回：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123; <span class="keyword">return</span> num1 + num2; &#125;</span><br></pre></td></tr></table></figure></p><p>如果你想要返回一个对象，必须用括号将这个对象括起来：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="function"><span class="params">x</span> =&gt;</span>(&#123; <span class="attr">id</span> : x , <span class="attr">name</span> : <span class="string">'name'</span> &#125;)</span><br></pre></td></tr></table></figure></p><p>箭头函数可以与变量解构结合使用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> full = <span class="function">(<span class="params">&#123; first, last &#125;</span>) =&gt;</span> first + <span class="string">' '</span> + last;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">full</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> person.first + <span class="string">' '</span> + person.last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="箭头函数的作用"><a href="#箭头函数的作用" class="headerlink" title="箭头函数的作用"></a>箭头函数的作用</h3><p>对于箭头函数的作用，个人认为有三点：</p><ol><li><p>箭头函数使函数的表达更为简洁。<br> 对于简单的一些功能函数，箭头函数相比于传统函数的表达更为简洁，并且代码量也更少，通常只需要一行。</p></li><li><p>简化回调函数：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 正常函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure><p> 这样使代码更加简洁也更加易读。</p></li><li><p>箭头函数可以将this对象绑定在定义时的作用域中，这种特性非常利于封装回调函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  id: <span class="string">'123456'</span>,</span><br><span class="line"></span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,</span><br><span class="line">      event =&gt; <span class="keyword">this</span>.doSomething(event.type), <span class="literal">false</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  doSomething: <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Handling '</span> + type  + <span class="string">' for '</span> + <span class="keyword">this</span>.id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>上面代码的<code>init</code>方法中，使用了箭头函数，这导致这个箭头函数里面的<code>this</code>，总是指向<code>handler</code>对象。否则，回调函数运行时，<code>this.doSomething</code>这一行会报错，因为此时<code>this</code>指向<code>document</code>对象。</p><h3 id="使用箭头函数时要注意"><a href="#使用箭头函数时要注意" class="headerlink" title="使用箭头函数时要注意"></a>使用箭头函数时要注意</h3><ol><li>函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。</li><li>不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</li><li>不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 <code>rest</code>参数代替。</li><li>不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</li></ol><p>这大概就是对箭头函数的大致介绍了，其他的还要小伙伴们自己去探索，祝大家学习愉快哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;箭头函数是ES6中一个新增的特性，今天我们就来看看它是如何使用的。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://rusyue.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://rusyue.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JS中的this用法小结</title>
    <link href="https://rusyue.com/2017/02/11/JS%E4%B8%AD%E7%9A%84this%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>https://rusyue.com/2017/02/11/JS中的this用法小结/</id>
    <published>2017-02-11T13:40:11.000Z</published>
    <updated>2018-02-19T15:00:54.371Z</updated>
    
    <content type="html"><![CDATA[<p>经常能看到关于<code>this</code>的博文，分享等，下面来谈谈前端小菜鸟眼中的<code>this</code></p><h2 id="JS中的this"><a href="#JS中的this" class="headerlink" title="JS中的this"></a>JS中的this</h2><p>关于<code>this</code>的概述，要说的这么一点：</p><p>1. this是javascript语言的一个关键字<br>2. 函数运行时，自动生成的一个内部对象，只能在函数内部使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'dingding'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3. 随着函数使用的不同场合，<code>this</code>指向会发生变化，generally speaking，<strong><code>this</code>指向调用函数的那个对象</strong></p><a id="more"></a><h2 id="this的六种情况使用"><a href="#this的六种情况使用" class="headerlink" title="this的六种情况使用"></a>this的六种情况使用</h2><h4 id="纯函数调用"><a href="#纯函数调用" class="headerlink" title="纯函数调用"></a>纯函数调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">1</span>;</span><br><span class="line">  alert(<span class="keyword">this</span>.x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line">  alert(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>很明显，这里<code>foo</code>在全局作用域下被调用，<code>this</code>指向window，this.x 在函数中被篡改，window.x = 0 因此结果是0</p><h4 id="作为对象方法调用"><a href="#作为对象方法调用" class="headerlink" title="作为对象方法调用"></a>作为对象方法调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">1</span>,</span><br><span class="line">  f: <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.f(); <span class="comment">// alert 1</span></span><br></pre></td></tr></table></figure><p>当函数作为某个对象的属性被调用,<code>this</code>指向该对象</p><h4 id="作为构造函数调用"><a href="#作为构造函数调用" class="headerlink" title="作为构造函数调用"></a>作为构造函数调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> foo();</span><br><span class="line"></span><br><span class="line">obj.x <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">window</span>.x <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><code>this</code>指向的是构造函数new出来的obj这个新的对象，而不是指向window，因此出现以上结果</p><h4 id="call-apply调用"><a href="#call-apply调用" class="headerlink" title="call/apply调用"></a>call/apply调用</h4><p>apply是函数对象的一个方法，作用就是改变函数的调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">1</span>,</span><br><span class="line">  f: <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.f.apply(); <span class="comment">// alert 2</span></span><br><span class="line">obj.f.apply(obj); <span class="comment">// alert 1</span></span><br></pre></td></tr></table></figure><p>apply 参数为空 默认的第一个参数（调用该函数的新对象）默认指向window</p><h4 id="bind调用"><a href="#bind调用" class="headerlink" title="bind调用"></a>bind调用</h4><p>Function.prototype.bind</p><p>举一个🌰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = <span class="number">9</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  x: <span class="number">81</span>,</span><br><span class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.getX()  <span class="comment">// 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> windowGetX = <span class="built_in">module</span>.getX</span><br><span class="line">windowGetX()   <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boundGetX = <span class="built_in">module</span>.getX.bind(<span class="built_in">module</span>)() <span class="comment">// 81</span></span><br></pre></td></tr></table></figure><p>再来一个🌰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"DingDing"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.name=name;</span><br><span class="line"> <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"my name is "</span>+<span class="keyword">this</span>.name);</span><br><span class="line">   &#125;,<span class="number">50</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">"dingding"</span>);</span><br><span class="line">person.sayName()   <span class="comment">// my name is DingDing</span></span><br></pre></td></tr></table></figure><p>怎么才能输出 my name is dingding呢？</p><p>ok</p><p>方案1: 利用call / apply 改变<code>this</code> 指向window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.sayName.call()</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">person.sayName.apply()</span><br></pre></td></tr></table></figure><p>方案2: 利用bind修改<code>this</code>指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"DingDing"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.name=name;</span><br><span class="line"> <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"my name is "</span>+<span class="keyword">this</span>.name);</span><br><span class="line">   &#125;.bind(<span class="keyword">this</span>),<span class="number">50</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">"dingding"</span>);</span><br><span class="line">person.sayName()   <span class="comment">// my name is dingding</span></span><br></pre></td></tr></table></figure><p>setTimeout 默认由window修改成指向person 因此 person.name === ‘dingding’</p><p>方案3: 其实我们经常会用到，至少我经常用，就是这么干</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"DingDing"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.name=name</span><br><span class="line"> <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line"> <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"my name is "</span> + that.name);</span><br><span class="line">   &#125;,<span class="number">50</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">"dingding"</span>);</span><br><span class="line">person.sayName()   <span class="comment">// my name is dingding</span></span><br></pre></td></tr></table></figure><p>person中的<code>this</code> 已经由that代替，so~  setTimeout 中that.name === ’dingding‘  蓝鹅 <code>this</code> 依然指向 window，但是又有什么关系呢，我们又不用，是吧！</p><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>说到箭头函数，那就比较厉害了！</p><p>箭头函数最大的坑，就是<strong>没有this</strong>! this固定化，始终指向外部对象。因此，不仅自身不能实例化，也不能用call,apply, bind来改变<code>this</code>指向～</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.seconds = <span class="number">0</span>;</span><br><span class="line"> setInterval( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">this</span>.seconds ++&#125; , <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(timer.seconds)&#125;, <span class="number">3000</span>) <span class="comment">// 0</span></span><br><span class="line">setInterval( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.seconds); <span class="keyword">this</span>.seconds ++&#125; , <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>如果把this.seconds打印出来，你会看到 每隔一秒打印一个NaN，因为 setInterval 里的<code>this</code>跟Time内部的<code>this</code> 没有半毛钱关系，所以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.seconds = <span class="literal">undefined</span> ++ = <span class="literal">NaN</span></span><br></pre></td></tr></table></figure><p>如果我们使用箭头函数呢？会怎么样？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.seconds = <span class="number">0</span>;</span><br><span class="line"> setInterval( <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.seconds ++, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</span><br><span class="line">setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(timer.seconds), <span class="number">3000</span>);   <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>构造函数内部的setInterval内的回调函数<code>this</code>始终指向实例化对象 即 timer</p><hr><p>Fine 关于this 总结的也就是这么几点，其实有时候经常用到的一些东西，真的未必你都能理解，如果真的都理解的，那么你写代码的效率提高的肯定不止一个level!</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常能看到关于&lt;code&gt;this&lt;/code&gt;的博文，分享等，下面来谈谈前端小菜鸟眼中的&lt;code&gt;this&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;JS中的this&quot;&gt;&lt;a href=&quot;#JS中的this&quot; class=&quot;headerlink&quot; title=&quot;JS中的this&quot;&gt;&lt;/a&gt;JS中的this&lt;/h2&gt;&lt;p&gt;关于&lt;code&gt;this&lt;/code&gt;的概述，要说的这么一点：&lt;/p&gt;
&lt;p&gt;1. this是javascript语言的一个关键字&lt;br&gt;2. 函数运行时，自动生成的一个内部对象，只能在函数内部使用&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&#39;dingding&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3. 随着函数使用的不同场合，&lt;code&gt;this&lt;/code&gt;指向会发生变化，generally speaking，&lt;strong&gt;&lt;code&gt;this&lt;/code&gt;指向调用函数的那个对象&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://rusyue.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://rusyue.com/tags/JavaScript/"/>
    
      <category term="this" scheme="https://rusyue.com/tags/this/"/>
    
  </entry>
  
</feed>
